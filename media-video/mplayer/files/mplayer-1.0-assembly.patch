--- cpudetect.c
+++ cpudetect.c
@@ -89,8 +89,7 @@
 	);
 #else
 // code from libavcodec:
-    __asm __volatile
-	("mov %%"REG_b", %%"REG_S"\n\t"
+    __asm __volatile ("mov %%"REG_b", %%"REG_S"\n\t"
          "cpuid\n\t"
          "xchg %%"REG_b", %%"REG_S
          : "=a" (p[0]), "=S" (p[1]), 
--- loader/win32.c
+++ loader/win32.c
@@ -91,8 +91,7 @@
 
 static void do_cpuid(unsigned int ax, unsigned int *regs)
 {
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "pushl %%ebx; pushl %%ecx; pushl %%edx;"
 	 ".byte  0x0f, 0xa2;"
 	 "movl   %%eax, (%2);"
@@ -107,8 +106,7 @@
 static unsigned int c_localcount_tsc()
 {
     int a;
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "rdtsc\n\t"
 	 :"=a"(a)
 	 :
@@ -118,8 +116,7 @@
 }
 static void c_longcount_tsc(long long* z)
 {
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "pushl %%ebx\n\t"
 	 "movl %%eax, %%ebx\n\t"
 	 "rdtsc\n\t"
@@ -2877,8 +2874,7 @@
 static long WINAPI expInterlockedExchangeAdd( long* dest, long incr )
 {
     long ret;
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "lock; xaddl %0,(%1)"
 	 : "=r" (ret)
 	 : "r" (dest), "0" (incr)
@@ -4016,8 +4012,7 @@
 	    // ok this trick with push/pop is necessary as otherwice
 	    // edi/esi registers are being trashed
 	    void* p = *start;
-	    __asm__ __volatile__
-		(
+	    __asm__ __volatile__ (
 		 "pushl %%ebx		\n\t"
 		 "pushl %%ecx		\n\t"
 		 "pushl %%edx		\n\t"
@@ -4278,8 +4273,7 @@
 
 static void explog10(void)
 {
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "fldl 8(%esp)	\n\t"
 	 "fldln2	\n\t"
 	 "fxch %st(1)	\n\t"
@@ -4289,8 +4283,7 @@
 
 static void expcos(void)
 {
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "fldl 8(%esp)	\n\t"
 	 "fcos		\n\t"
 	);
@@ -4306,8 +4299,7 @@
 
 static void exp_ftol(void)
 {
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "sub $12, %esp		\n\t"
 	 "fstcw   -2(%ebp)	\n\t"
 	 "wait			\n\t"
@@ -4367,8 +4359,7 @@
 {
     //dbgprintf("!!!!UNIMPLEMENTED: setjmp3(%p, %d) => 0\n", jmpbuf, x);
     //return 0;
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 //"mov 4(%%esp), %%edx	\n\t"
 	 "mov (%%esp), %%eax   \n\t"
 	 "mov %%eax, (%%edx)	\n\t" // store ebp
@@ -4389,8 +4380,7 @@
 	 : "eax"
 	);
 #if 1
-    __asm__ __volatile__
-	(
+    __asm__ __volatile__ (
 	 "mov %%fs:0, %%eax	\n\t" // unsure
 	 "mov %%eax, 24(%%edx)	\n\t"
 	 "cmp $0xffffffff, %%eax \n\t"
