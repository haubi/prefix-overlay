
# HG changeset patch
# User Carlos R. Mafra <crmafra2@gmail.com>
# Date 1229313545 28800
# Node ID 5a2507602c48324fba0f07754a442a8cc6ab967c
# Parent 39c2c334b1cc3c160da95c0042e1f073048519ad
Fix buffer overflows in shortcut and workspace name handling

The handling of user defined shortcuts was not checking the length
of the shortcut before copying it to a fixed-length temporary buffer,

char buf[128];

     strcpy(buf, shortcutDefinition);

and strcpy() is well known for not checking if overflows will occur.

In particular, wmaker was crashing here if a big 'shortcut' was defined
either through WPrefs or by directly editing the configuration files.

This is now avoided by using strncpy() instead, and wmaker does not
crash anymore.

And this patch also fixes a similar buffer overflow for big workspace
names too.

Furthermore, use MAX_SHORTCUT_LENGTH instead of raw number and define
it to be 32 instead of 128.

--- a/src/defaults.c	Thu Nov 06 01:56:29 2008 +0100
+++ b/src/defaults.c	Sun Dec 14 19:59:05 2008 -0800
@@ -2523,7 +2523,7 @@
     KeySym ksym;
     char *val;
     char *k;
-    char buf[128], *b;
+    char buf[MAX_SHORTCUT_LENGTH], *b;
 
 
     GET_STRING_OR_DEFAULT("Key spec", val);
@@ -2536,7 +2536,7 @@
         return True;
     }
 
-    strcpy(buf, val);
+    strncpy(buf, val, MAX_SHORTCUT_LENGTH);
 
     b = (char*)buf;
 
--- a/src/rootmenu.c	Thu Nov 06 01:56:29 2008 +0100
+++ b/src/rootmenu.c	Sun Dec 14 19:59:05 2008 -0800
@@ -513,11 +513,11 @@
     Shortcut *ptr;
     KeySym ksym;
     char *k;
-    char buf[128], *b;
+    char buf[MAX_SHORTCUT_LENGTH], *b;
 
     ptr = wmalloc(sizeof(Shortcut));
 
-    strcpy(buf, shortcutDefinition);
+    strncpy(buf, shortcutDefinition, MAX_SHORTCUT_LENGTH);
     b = (char*)buf;
 
     /* get modifiers */
--- a/src/usermenu.c	Thu Nov 06 01:56:29 2008 +0100
+++ b/src/usermenu.c	Sun Dec 14 19:59:05 2008 -0800
@@ -139,7 +139,7 @@
     KeySym ksym;
     char *k;
     char *buffer;
-    char buf[128], *b;
+    char buf[MAX_SHORTCUT_LENGTH], *b;
     int keycount,i,j,mod;
 
     if (WMIsPLString(shortcut)) {
@@ -163,9 +163,10 @@
     for (i=0,j=0;i<keycount;i++) {
         data->key[j].modifier = 0;
         if (WMIsPLArray(shortcut)) {
-            strcpy(buf, WMGetFromPLString(WMGetFromPLArray(shortcut, i)));
+            strncpy(buf, WMGetFromPLString(WMGetFromPLArray(shortcut, i)),
+		    MAX_SHORTCUT_LENGTH);
         } else {
-            strcpy(buf, WMGetFromPLString(shortcut));
+            strncpy(buf, WMGetFromPLString(shortcut), MAX_SHORTCUT_LENGTH);
         }
         b = (char*)buf;
 
--- a/src/wconfig.h.in	Thu Nov 06 01:56:29 2008 +0100
+++ b/src/wconfig.h.in	Sun Dec 14 19:59:05 2008 -0800
@@ -489,6 +489,7 @@
 
 #define WM_PI 3.14159265358979323846
 
+#define MAX_SHORTCUT_LENGTH 32
 #define FRAME_BORDER_WIDTH 1	       /* width of window border for frames */
 
 #define RESIZEBAR_HEIGHT 8	       /* height of the resizebar */
--- a/src/workspace.c	Thu Nov 06 01:56:29 2008 +0100
+++ b/src/workspace.c	Sun Dec 14 19:59:05 2008 -0800
@@ -1384,7 +1384,7 @@
         i = scr->workspace_count-(menu->entry_no-2);
         ws = menu->entry_no - 2;
         while (i>0) {
-            strcpy(title, scr->workspaces[ws]->name);
+            strncpy(title, scr->workspaces[ws]->name, MAX_WORKSPACENAME_WIDTH);
 
             entry = wMenuAddCallback(menu, title, switchWSCommand, (void*)ws);
             entry->flags.indicator = 1;

