
# HG changeset patch
# User John H. Robinson, IV <jaqque@sbih.org>
# Date 1229205460 28800
# Node ID 85840502e696838a1a4caf845c1687a81f29e73c
# Parent ded22ccbb04f0893e7d33055066674c9a3116bd8
Added WMGetTextFieldCursorPosition

This patch adds a function WMGetTextFieldCursorPosition to the WINGs library.
This function is used by the 'adialog' patch.

Submitted by: Gilbert Ashley <amigo@ibiblio.org>
Author: unknown
Origin: ALT/Sisyphus Linux, Alexey Voinov <voins@altlinux.ru>

--- a/WINGs/WINGs/WINGs.h	Sat Dec 13 13:53:46 2008 -0800
+++ b/WINGs/WINGs/WINGs.h	Sat Dec 13 13:57:40 2008 -0800
@@ -1125,6 +1125,8 @@
 
 void WMSetTextFieldCursorPosition(WMTextField *tPtr, unsigned int position);
 
+unsigned WMGetTextFieldCursorPosition(WMTextField *tPtr);
+
 void WMSetTextFieldNextTextField(WMTextField *tPtr, WMTextField *next);
 
 void WMSetTextFieldPrevTextField(WMTextField *tPtr, WMTextField *prev);
--- a/WINGs/wtextfield.c	Sat Dec 13 13:53:46 2008 -0800
+++ b/WINGs/wtextfield.c	Sat Dec 13 13:57:40 2008 -0800
@@ -659,6 +659,14 @@
             paintTextField(tPtr);
         }
     }
+}
+
+unsigned
+WMGetTextFieldCursorPosition(WMTextField *tPtr)
+{
+    CHECK_CLASS(tPtr, WC_TextField);
+
+    return tPtr->cursorPosition;
 }
 
 


# HG changeset patch
# User John H. Robinson, IV <jaqque@sbih.org>
# Date 1229206241 28800
# Node ID 714532b354dd0e89ae06060d64916ac592ba7e99
# Parent 85840502e696838a1a4caf845c1687a81f29e73c
Adds history to some dialog boxes

This patch adds history to some dialog boxes. To use it replace %a with %A in
menu file (like in "Run..." menu item).You can specify third parameter to %A to
use different histories for differen dialogs. All history files is kept in
~/GNUstep/.AppInfo/WindowMaker/. Number of history lines controlled by
DialogHistoryLines parameter (one for all dialogs). Default is to keep 500
lines. Also commands and directories completion added. Press Tab to complete
something.

Author: unknown
Origin: ALT/Sisyphus Linux, Alexey Voinov <voins@altlinux.ru>
Submitted by: Gilbert Ashley

I've added the fragments to patch the default menu files, so that this feature
is enabled by default.

--- a/WindowMaker/menu	Sat Dec 13 13:57:40 2008 -0800
+++ b/WindowMaker/menu	Sat Dec 13 14:10:41 2008 -0800
@@ -116,7 +116,7 @@
 		"Process List" EXEC xterm -e top
 		"Manual Browser" EXEC xman
 	"Info" END
-	"Run..." SHEXEC %a(Run,Type command to run:)
+	"Run..." SHEXEC %A(Run,Type command to run:)
 	"XTerm" EXEC xterm -sb 
 	"Mozilla Firefox" EXEC firefox
 	"Workspaces" WORKSPACE_MENU
--- a/WindowMaker/menu.bg	Sat Dec 13 13:57:40 2008 -0800
+++ b/WindowMaker/menu.bg	Sat Dec 13 14:10:41 2008 -0800
@@ -1,222 +1,222 @@
-/*
- * Дефиниция на главното меню за WindowMaker
- *
- * Синтаксисът е:
- *
- * <Заглавие> [SHORTCUT <комбинация>] <команда> <параметри>
- *
- * <Заглавие> е какъв да е низ, който ще се използва като название на
- * съответния елемент от менюто. Ако включва интервали, трябва да се
- * огради с ".
- * 
- * SHORTCUT определя клавишна комбинация ("бърз клавиш") за този
- * елемент на менюто. <комбинация> има същия синтаксис, както клавишните
- * комбинации във файла $HOME/GNUstep/Defaults/WindowMaker,
- * напр. RootMenuKey или MiniaturizeKey.
- *
- * Не може да се посочва клавишна комбинация за MENU и OPEN_MENU.
- * 
- * <Command> може да бъде: 
- *	MENU - започва дефиниция на (под)меню
- *	END  - завършва дефиницията на (под)меню
- *	OPEN_MENU - чете менюто от файл, програмен канал или
- *                  файловете от директория, евентуално предшествани
- *                  от команда.
- *	WORKSPACE_MENU - добавя подменю за работните места. Може да се
- *                       използва само едно такова подменю.
- *	EXEC <program> - изпълнява външна програма
- *	SHEXEC <command> - изпълнява команда на командната обвивка
- *                         (напр. gimp > /dev/null)
- *	EXIT - излиза от администратора на прозорците
- *	RESTART [<администратор>] - рестартира WindowMaker или
- *                                  страртира друг администратор на
- *                                  прозорците
- *	REFRESH - опреснява (прерисува) работната площ
- *	ARRANGE_ICONS - преподрежда иконките на работното място.
- *	SHUTDOWN - убива всички клиенти (и приключва X-сесията)
- *	SHOW_ALL - показва всички скрити прозорци на работното място
- *	HIDE_OTHERS - скрива всички прозорци на работното място, освен
- *                    имащия фокус (или последния получавал фокус)
- *	SAVE_SESSION - запазва текущото състояние на работната площ, в
- *                     това число всички стартирани приложения,
- *                     местата на прозорците им, на дока,
- *                     кламера. Това състояние ще бъде възстановено
- *                     при всяко стартиране на WindowMaker, докато
- *                     наново не се използва SAVE_SESSION или
- *                     CLEAR_SESSION. Ако SaveSessionOnExit = Yes в
- *                     конфигурационната база-данни на Window Maker,
- *                     то при всяко излизане от WindowMaker
- *                     състоянието на сесията автоматично ще бъде
- *                     запазено. 
- *	CLEAR_SESSION - изтрива данните за по-рано запазена
- *                      сесия. Това няма никакъв ефект, ако
- *                      SaveSessionOnExit = Yes.
- *	INFO - показва панела "Инфо".
- *
- * Синтаксис на OPEN_MENU:
- *   1. Меню от файл:
- *	// отваря файл-меню, който трябва да съдържа меню и го вмъква
- *      // на текущото място.
- *	OPEN_MENU файл-меню
- *   2. Меню от програмен канал:
- *	// пуска командата и очаква тя да генерира меню на стандартния
- *      // си изход.
- *	OPEN_MENU | команда
- *   3. Меню от директория:
- *	// Отваря едната или повече директории и прави сортирано
- *      // азбучно меню за всички изпълними файлове и поддиректории в
- *      // тях. 
- *	OPEN_MENU директория1 [директория2 ...]
- *   4. Меню от директория с команда
- *	// Отваря едната или повече директории и прави сортирано
- *      // азбучно меню за всички поддиректории и четими файлове, като
- *      // всеки от файловете ще бъде обработван с командата.
- *	OPEN_MENU [опции] директория1 [директория2 ...] WITH команда -опции
- *		Опции:
- * 			-noext 	Пропуска всичко, което е след
- *                              последната точка в името на файла.
- *
- * <параметри> е програмата, която трябва да се изпълни.
- *
- * ** Опции за командния ред с EXEC:
- * %s - замества се с избраното в момента
- * %a(title[,prompt]) - отваря диалогова клетка с заглавие "title" и
- *                      незадължителна подкана prompt, след което се
- *                      замества с въведеното.
- * %w - замества се с XID (номера) на прозореца с фокус.
- * %W - замества се с номера на текущото работно място.
- * 
- * Преди специалните символи (като % и ") може да поставяте \ за да
- * загубят специалното си значение:
- * пример: xterm -T "\"Hello World\""
- *
- * Допустими са и стандартните комбинации като \n
- *
- * Всяка команда MENU трябва да има съответна команда END.
- *
- * Пример:
- *
- * "Проба" MENU
- *	"XTerm" EXEC xterm
- *		// прави подменю със съдържимото от /usr/openwin/bin
- *	"XView приложения" OPEN_MENU "/usr/openwin/bin"
- *		// някои X11-приложения от различни директории
- *	"X11 приложения" OPEN_MENU /usr/X11/bin $HOME/bin/X11
- *		// за картинки на фона
- *	"Фон" OPEN_MENU -noext $HOME/images /usr/share/images WITH wmsetbg -u -t
- *		// Вмъква style.menu тук.
- *	"Style" OPEN_MENU style.menu
- * "Проба" END
- */
-
-#include "wmmacros"
-
-"Applications" MENU
-	"Инфо" MENU
-		"Информационен панел..." INFO_PANEL
-		"Лицензионен панел..." LEGAL_PANEL
-		"Системна конзола" EXEC xconsole
-		"Натоварване на системата" SHEXEC xosview || xload
-		"Списък процеси" EXEC xterm -e top
-		"Ръководства" EXEC xman
-	"Инфо" END
-	"Стартирай..." SHEXEC %a(Run,Въведете команда, която да се стартира:)
-	"XTerm" EXEC xterm -sb 
-	"Rxvt" EXEC rxvt -bg black -fg white -fn fixed
-	"Работни места" WORKSPACE_MENU
-	"Приложения" MENU
-		"Графични" MENU
-			"Gimp" SHEXEC gimp >/dev/null
-			"XV" EXEC xv
-			"XPaint" EXEC xpaint
-			"XFig" EXEC xfig
-		"Графични" END
-		"X File Manager" EXEC xfm
-		"OffiX Files" EXEC files
-		"LyX" EXEC lyx
-		"Netscape" EXEC netscape 
-  		"Ghostview" EXEC ghostview %a(GhostView,Enter file to view)
-		"Acrobat" EXEC /usr/local/Acrobat3/bin/acroread %a(Acrobar,Enter PDF to view)
-  		"TkDesk" EXEC tkdesk
-	"Приложения" END
-	"Редактори" MENU
-		"XFte" EXEC xfte
-		"XEmacs" SHEXEC xemacs || emacs
-		"XJed" EXEC xjed 
-		"NEdit" EXEC nedit
-		"Xedit" EXEC xedit
-		"VI" EXEC xterm -e vi
-	"Редактори" END
-	"Разни" MENU
-		"Xmcd" SHEXEC xmcd 2> /dev/null
-		"Xplaycd" EXEC xplaycd
-		"Xmixer" EXEC xmixer
-	"Разни" END
-	"Инструменти" MENU
-		"Калкукатор" EXEC xcalc
-		"Свойства на прозореца" SHEXEC xprop | xmessage -center -title 'xprop' -file -
-		"Избор на шрифт" EXEC xfontsel
-		"Емулатор на терминал" EXEC xminicom
-		"Лупа" EXEC xmag
-		"Цветова палитра" EXEC xcmap
-		"XKill" EXEC xkill
-		"Clipboard" EXEC xclipboard
-	"Инструменти" END
-
-	"Избор" MENU
-		"Copy" SHEXEC echo '%s' | wxcopy
-		"Mail To" EXEC xterm -name mail -T "Pine" -e pine %s
-		"Navigate" EXEC netscape %s
-		"Search in Manual" SHEXEC MANUAL_SEARCH(%s)
-	"Избор" END
-
-	"Работно място" MENU
-		"Скрий другите" HIDE_OTHERS
-		"Покажи всички" SHOW_ALL
-		"Подреди иконките" ARRANGE_ICONS
-		"Опресни" REFRESH
-		"Заключи" EXEC xlock -allowroot -usefirst
-		"Запази сесията" SAVE_SESSION
-		"Изчисти запазената сесия" CLEAR_SESSION
-	"Работни места" END
-
-	"Изглед" MENU
-		"Теми" OPEN_MENU -noext THEMES_DIR $HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle
-		"Стилове" OPEN_MENU -noext STYLES_DIR $HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle
-		"Колекции иконки" OPEN_MENU -noext ICON_SETS_DIR $HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons
-		"Фон" MENU
-			"Плътен" MENU
-                        	"Черен" WS_BACK '(solid, black)'
-                        	"Син"  WS_BACK '(solid, "#505075")'
-				"Тъмно виолетово" WS_BACK '(solid, "#243e6c")'
-				"Силно синьо" WS_BACK '(solid, "#180090")'
-                        	"Мораво" WS_BACK '(solid, "#554466")'
-                        	"Пшеничен"  WS_BACK '(solid, "wheat4")'
-                        	"Тъмно сив"  WS_BACK '(solid, "#333340")'
-                        	"Винен" WS_BACK '(solid, "#400020")'
-			"Плътен" END
-			"Градиент" MENU
-				"Слънце" WS_BACK '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'
-				"Небе" WS_BACK '(vgradient, blue4, white)'
-    				"Сини сенки" WS_BACK '(vgradient, "#7080a5", "#101020")'
-				"Виолетови сенки" WS_BACK '(vgradient, "#746ebc", "#242e4c")'
-			    	"Морави сенки" WS_BACK '(vgradient, "#654c66", "#151426")'
-    				"Пшенични сенки" WS_BACK '(vgradient, "#a09060", "#302010")'
-    				"Сиви сенки" WS_BACK '(vgradient, "#636380", "#131318")'
-    				"Винени сенки" WS_BACK '(vgradient, "#600040", "#180010")'
-			"Градиент" END
-			"Images" OPEN_MENU -noext BACKGROUNDS_DIR $HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t
-		"Фон" END
-		"Запази темата" SHEXEC getstyle -t $HOME/GNUstep/Library/WindowMaker/Themes/"%a(Theme name,Enter file name:)"
-		"Запази колекцията иконки" SHEXEC geticonset $HOME/GNUstep/Library/WindowMaker/IconSets/"%a(IconSet name,Enter file name:)"
-		"Пособие за настройки" EXEC /usr/local/GNUstep/Applications/WPrefs.app/WPrefs
-	"Изглед" END
-
-	"Изход"	MENU
-		"Рестартиране" RESTART
-		"Стартирай BlackBox" RESTART blackbox
-		"Стартирай kwm" RESTART kwm
-		"Стартирай IceWM" RESTART icewm
-		"Изход..."  EXIT
-	"Изход" END
-"Приложения" END
\ No newline at end of file
+/*
+ * Дефиниция на главното меню за WindowMaker
+ *
+ * Синтаксисът е:
+ *
+ * <Заглавие> [SHORTCUT <комбинация>] <команда> <параметри>
+ *
+ * <Заглавие> е какъв да е низ, който ще се използва като название на
+ * съответния елемент от менюто. Ако включва интервали, трябва да се
+ * огради с ".
+ * 
+ * SHORTCUT определя клавишна комбинация ("бърз клавиш") за този
+ * елемент на менюто. <комбинация> има същия синтаксис, както клавишните
+ * комбинации във файла $HOME/GNUstep/Defaults/WindowMaker,
+ * напр. RootMenuKey или MiniaturizeKey.
+ *
+ * Не може да се посочва клавишна комбинация за MENU и OPEN_MENU.
+ * 
+ * <Command> може да бъде: 
+ *	MENU - започва дефиниция на (под)меню
+ *	END  - завършва дефиницията на (под)меню
+ *	OPEN_MENU - чете менюто от файл, програмен канал или
+ *                  файловете от директория, евентуално предшествани
+ *                  от команда.
+ *	WORKSPACE_MENU - добавя подменю за работните места. Може да се
+ *                       използва само едно такова подменю.
+ *	EXEC <program> - изпълнява външна програма
+ *	SHEXEC <command> - изпълнява команда на командната обвивка
+ *                         (напр. gimp > /dev/null)
+ *	EXIT - излиза от администратора на прозорците
+ *	RESTART [<администратор>] - рестартира WindowMaker или
+ *                                  страртира друг администратор на
+ *                                  прозорците
+ *	REFRESH - опреснява (прерисува) работната площ
+ *	ARRANGE_ICONS - преподрежда иконките на работното място.
+ *	SHUTDOWN - убива всички клиенти (и приключва X-сесията)
+ *	SHOW_ALL - показва всички скрити прозорци на работното място
+ *	HIDE_OTHERS - скрива всички прозорци на работното място, освен
+ *                    имащия фокус (или последния получавал фокус)
+ *	SAVE_SESSION - запазва текущото състояние на работната площ, в
+ *                     това число всички стартирани приложения,
+ *                     местата на прозорците им, на дока,
+ *                     кламера. Това състояние ще бъде възстановено
+ *                     при всяко стартиране на WindowMaker, докато
+ *                     наново не се използва SAVE_SESSION или
+ *                     CLEAR_SESSION. Ако SaveSessionOnExit = Yes в
+ *                     конфигурационната база-данни на Window Maker,
+ *                     то при всяко излизане от WindowMaker
+ *                     състоянието на сесията автоматично ще бъде
+ *                     запазено. 
+ *	CLEAR_SESSION - изтрива данните за по-рано запазена
+ *                      сесия. Това няма никакъв ефект, ако
+ *                      SaveSessionOnExit = Yes.
+ *	INFO - показва панела "Инфо".
+ *
+ * Синтаксис на OPEN_MENU:
+ *   1. Меню от файл:
+ *	// отваря файл-меню, който трябва да съдържа меню и го вмъква
+ *      // на текущото място.
+ *	OPEN_MENU файл-меню
+ *   2. Меню от програмен канал:
+ *	// пуска командата и очаква тя да генерира меню на стандартния
+ *      // си изход.
+ *	OPEN_MENU | команда
+ *   3. Меню от директория:
+ *	// Отваря едната или повече директории и прави сортирано
+ *      // азбучно меню за всички изпълними файлове и поддиректории в
+ *      // тях. 
+ *	OPEN_MENU директория1 [директория2 ...]
+ *   4. Меню от директория с команда
+ *	// Отваря едната или повече директории и прави сортирано
+ *      // азбучно меню за всички поддиректории и четими файлове, като
+ *      // всеки от файловете ще бъде обработван с командата.
+ *	OPEN_MENU [опции] директория1 [директория2 ...] WITH команда -опции
+ *		Опции:
+ * 			-noext 	Пропуска всичко, което е след
+ *                              последната точка в името на файла.
+ *
+ * <параметри> е програмата, която трябва да се изпълни.
+ *
+ * ** Опции за командния ред с EXEC:
+ * %s - замества се с избраното в момента
+ * %a(title[,prompt]) - отваря диалогова клетка с заглавие "title" и
+ *                      незадължителна подкана prompt, след което се
+ *                      замества с въведеното.
+ * %w - замества се с XID (номера) на прозореца с фокус.
+ * %W - замества се с номера на текущото работно място.
+ * 
+ * Преди специалните символи (като % и ") може да поставяте \ за да
+ * загубят специалното си значение:
+ * пример: xterm -T "\"Hello World\""
+ *
+ * Допустими са и стандартните комбинации като \n
+ *
+ * Всяка команда MENU трябва да има съответна команда END.
+ *
+ * Пример:
+ *
+ * "Проба" MENU
+ *	"XTerm" EXEC xterm
+ *		// прави подменю със съдържимото от /usr/openwin/bin
+ *	"XView приложения" OPEN_MENU "/usr/openwin/bin"
+ *		// някои X11-приложения от различни директории
+ *	"X11 приложения" OPEN_MENU /usr/X11/bin $HOME/bin/X11
+ *		// за картинки на фона
+ *	"Фон" OPEN_MENU -noext $HOME/images /usr/share/images WITH wmsetbg -u -t
+ *		// Вмъква style.menu тук.
+ *	"Style" OPEN_MENU style.menu
+ * "Проба" END
+ */
+
+#include "wmmacros"
+
+"Applications" MENU
+	"Инфо" MENU
+		"Информационен панел..." INFO_PANEL
+		"Лицензионен панел..." LEGAL_PANEL
+		"Системна конзола" EXEC xconsole
+		"Натоварване на системата" SHEXEC xosview || xload
+		"Списък процеси" EXEC xterm -e top
+		"Ръководства" EXEC xman
+	"Инфо" END
+	"Стартирай..." SHEXEC %A(Run,Въведете команда, която да се стартира:)
+	"XTerm" EXEC xterm -sb 
+	"Rxvt" EXEC rxvt -bg black -fg white -fn fixed
+	"Работни места" WORKSPACE_MENU
+	"Приложения" MENU
+		"Графични" MENU
+			"Gimp" SHEXEC gimp >/dev/null
+			"XV" EXEC xv
+			"XPaint" EXEC xpaint
+			"XFig" EXEC xfig
+		"Графични" END
+		"X File Manager" EXEC xfm
+		"OffiX Files" EXEC files
+		"LyX" EXEC lyx
+		"Netscape" EXEC netscape 
+  		"Ghostview" EXEC ghostview %a(GhostView,Enter file to view)
+		"Acrobat" EXEC /usr/local/Acrobat3/bin/acroread %a(Acrobar,Enter PDF to view)
+  		"TkDesk" EXEC tkdesk
+	"Приложения" END
+	"Редактори" MENU
+		"XFte" EXEC xfte
+		"XEmacs" SHEXEC xemacs || emacs
+		"XJed" EXEC xjed 
+		"NEdit" EXEC nedit
+		"Xedit" EXEC xedit
+		"VI" EXEC xterm -e vi
+	"Редактори" END
+	"Разни" MENU
+		"Xmcd" SHEXEC xmcd 2> /dev/null
+		"Xplaycd" EXEC xplaycd
+		"Xmixer" EXEC xmixer
+	"Разни" END
+	"Инструменти" MENU
+		"Калкукатор" EXEC xcalc
+		"Свойства на прозореца" SHEXEC xprop | xmessage -center -title 'xprop' -file -
+		"Избор на шрифт" EXEC xfontsel
+		"Емулатор на терминал" EXEC xminicom
+		"Лупа" EXEC xmag
+		"Цветова палитра" EXEC xcmap
+		"XKill" EXEC xkill
+		"Clipboard" EXEC xclipboard
+	"Инструменти" END
+
+	"Избор" MENU
+		"Copy" SHEXEC echo '%s' | wxcopy
+		"Mail To" EXEC xterm -name mail -T "Pine" -e pine %s
+		"Navigate" EXEC netscape %s
+		"Search in Manual" SHEXEC MANUAL_SEARCH(%s)
+	"Избор" END
+
+	"Работно място" MENU
+		"Скрий другите" HIDE_OTHERS
+		"Покажи всички" SHOW_ALL
+		"Подреди иконките" ARRANGE_ICONS
+		"Опресни" REFRESH
+		"Заключи" EXEC xlock -allowroot -usefirst
+		"Запази сесията" SAVE_SESSION
+		"Изчисти запазената сесия" CLEAR_SESSION
+	"Работни места" END
+
+	"Изглед" MENU
+		"Теми" OPEN_MENU -noext THEMES_DIR $HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle
+		"Стилове" OPEN_MENU -noext STYLES_DIR $HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle
+		"Колекции иконки" OPEN_MENU -noext ICON_SETS_DIR $HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons
+		"Фон" MENU
+			"Плътен" MENU
+                        	"Черен" WS_BACK '(solid, black)'
+                        	"Син"  WS_BACK '(solid, "#505075")'
+				"Тъмно виолетово" WS_BACK '(solid, "#243e6c")'
+				"Силно синьо" WS_BACK '(solid, "#180090")'
+                        	"Мораво" WS_BACK '(solid, "#554466")'
+                        	"Пшеничен"  WS_BACK '(solid, "wheat4")'
+                        	"Тъмно сив"  WS_BACK '(solid, "#333340")'
+                        	"Винен" WS_BACK '(solid, "#400020")'
+			"Плътен" END
+			"Градиент" MENU
+				"Слънце" WS_BACK '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'
+				"Небе" WS_BACK '(vgradient, blue4, white)'
+    				"Сини сенки" WS_BACK '(vgradient, "#7080a5", "#101020")'
+				"Виолетови сенки" WS_BACK '(vgradient, "#746ebc", "#242e4c")'
+			    	"Морави сенки" WS_BACK '(vgradient, "#654c66", "#151426")'
+    				"Пшенични сенки" WS_BACK '(vgradient, "#a09060", "#302010")'
+    				"Сиви сенки" WS_BACK '(vgradient, "#636380", "#131318")'
+    				"Винени сенки" WS_BACK '(vgradient, "#600040", "#180010")'
+			"Градиент" END
+			"Images" OPEN_MENU -noext BACKGROUNDS_DIR $HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t
+		"Фон" END
+		"Запази темата" SHEXEC getstyle -t $HOME/GNUstep/Library/WindowMaker/Themes/"%a(Theme name,Enter file name:)"
+		"Запази колекцията иконки" SHEXEC geticonset $HOME/GNUstep/Library/WindowMaker/IconSets/"%a(IconSet name,Enter file name:)"
+		"Пособие за настройки" EXEC /usr/local/GNUstep/Applications/WPrefs.app/WPrefs
+	"Изглед" END
+
+	"Изход"	MENU
+		"Рестартиране" RESTART
+		"Стартирай BlackBox" RESTART blackbox
+		"Стартирай kwm" RESTART kwm
+		"Стартирай IceWM" RESTART icewm
+		"Изход..."  EXIT
+	"Изход" END
+"Приложения" END
--- a/WindowMaker/plmenu	Sat Dec 13 13:57:40 2008 -0800
+++ b/WindowMaker/plmenu	Sat Dec 13 14:10:41 2008 -0800
@@ -1,106 +1,106 @@
-("Applications",
- ("Info",
-  ("Info Panel", INFO_PANEL),
-  ("Legal", LEGAL_PANEL),
-  ("System Console", EXEC, "xconsole"),
-  ("System Load", SHEXEC, "xosview || xload"),
-  ("Process List", EXEC, "xterm -e top"),
-  ("Manual Browser", EXEC, "xman")
- ),
- ("Run...", SHEXEC, "%a(Run,Type command to run:)"),
- ("XTerm", EXEC, "xterm -sb"),
- ("Mozilla Firefox", EXEC, "firefox"),
- ("Workspaces", WORKSPACE_MENU),
- ("Applications",
-  ("Gimp", SHEXEC, "gimp >/dev/null"),
-  ("Ghostview", EXEC, "ghostview %a(Enter file to view)"),
-  ("Xpdf", EXEC, "xpdf %a(Enter PDF to view)"),
-  ("Abiword", EXEC, "abiword"),
-  ("Dia", EXEC, "dia"),
-  ("OpenOffice.org",
-   ("OpenOffice.org", EXEC, "ooffice"),
-   ("Writer", EXEC, "oowriter"),
-   ("Spreadsheet", EXEC, "oocalc"),
-   ("Draw", EXEC, "oodraw"),
-   ("Impress", EXEC, "ooimpress")
-  ),
-  ("Editors",
-   ("XEmacs", EXEC, "xemacs"),
-   ("Emacs", EXEC, "emacs"),
-   ("XJed", EXEC, "xjed"),
-   ("VI", EXEC, "xterm -e vi"),
-   ("GVIM", EXEC, "gvim"),
-   ("NEdit", EXEC, "nedit"),
-   ("Xedit", EXEC, "xedit")
-  ),
-  ("Multimedia",
-   ("XMMS", 
-    ("XMMS", EXEC, "xmms"),
-    ("XMMS play/pause", EXEC, "xmms -t"),
-    ("XMMS stop", EXEC, "xmms -s")
-   ),
-   ("Xine video player", EXEC, "xine"),
-   ("MPlayer", EXEC, "mplayer")
-  )
- ),
- ("Utils",
-  ("Calculator", EXEC, "xcalc"),
-  ("Window Properties", SHEXEC, "xprop | xmessage -center -title 'xprop' -file -"),
-  ("Font Chooser", EXEC, "xfontsel"),
-  ("Magnify", EXEC, "wmagnify"),
-  ("Colormap", EXEC, "xcmap"),
-  ("Kill X Application", EXEC, "xkill")
- ),
- ("Selection",
-  ("Copy", SHEXEC, "echo '%s' | wxcopy"),
-  ("Mail To", EXEC, "xterm -name mail -T Pine -e pine %s"),
-  ("Navigate", EXEC, "mozilla %s"),
-  ("Search in Manual", EXEC, "MANUAL_SEARCH(%s)")
- ),
- ("Commands",
-  ("Hide Others", HIDE_OTHERS),
-  ("Show All", SHOW_ALL),
-  ("Arrange Icons", ARRANGE_ICONS),
-  ("Refresh", REFRESH),
-  ("Lock", EXEC, "xlock -allowroot -usefirst")
- ),
- ("Appearance",
-  ("Themes", OPEN_MENU, "-noext #wmdatadir#/Themes $HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle"),
-  ("Styles", OPEN_MENU, "-noext #wmdatadir#/Styles $HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle"),
-  ("Icon Sets", OPEN_MENU, "-noext #wmdatadir#/IconSets $HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons"),
-  ("Background",
-   ("Solid",
-	("Black", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, black)'"),
-	("Blue",  EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#505075\")'"),
-	("Indigo", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#243e6c\")'"),
-	("Bluemarine", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#224477\")'"),
-	("Purple", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#554466\")'"),
-	("Wheat", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, wheat4)'"),
-	("Dark Gray", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#333340\")'"),
-	("Wine", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#400020\")'")
-   ),
-   ("Gradient",
-	("Sunset", EXEC, "wdwrite WindowMaker WorkspaceBack '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'"),
-	("Sky", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, blue4, white)'"),
-	("Blue Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#7080a5\", \"#101020\")'"),
-	("Indigo Shades", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#746ebc\", \"#242e4c\")'"),
-	("Purple Shades", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#654c66\", \"#151426\")'"),
-	("Wheat Shades",  EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#a09060\", \"#302010\")'"),
-	("Grey Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#636380\", \"#131318\")'"),
-	("Wine Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#600040\", \"#180010\")'")
-   ),
-   ("Images", OPEN_MENU, "-noext #wmdatadir#/Backgrounds $HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t")
-   ),   
-   ("Save Theme", SHEXEC, "getstyle -t $HOME/GNUstep/Library/WindowMaker/Themes/\"%a(Theme name)\""),
-   ("Save IconSet", SHEXEC, "geticonset $HOME/GNUstep/Library/WindowMaker/IconSets/\"%a(IconSet name)\""),
-   ("Preferences Utility", EXEC, "/usr/local/GNUstep/Applications/WPrefs.app/WPrefs")
-   ), 
-   ("Session",
-    ("Save Session", SAVE_SESSION),
-    ("Clear Session", CLEAR_SESSION),
-	("Restart Window Maker", RESTART),
-	("Start BlackBox", RESTART, blackbox),
-	("Start IceWM", RESTART, icewm),
-	("Exit", EXIT)
-   )
-)
+("Applications",
+ ("Info",
+  ("Info Panel", INFO_PANEL),
+  ("Legal", LEGAL_PANEL),
+  ("System Console", EXEC, "xconsole"),
+  ("System Load", SHEXEC, "xosview || xload"),
+  ("Process List", EXEC, "xterm -e top"),
+  ("Manual Browser", EXEC, "xman")
+ ),
+ ("Run...", SHEXEC, "%A(Run,Type command to run:)"),
+ ("XTerm", EXEC, "xterm -sb"),
+ ("Mozilla Firefox", EXEC, "firefox"),
+ ("Workspaces", WORKSPACE_MENU),
+ ("Applications",
+  ("Gimp", SHEXEC, "gimp >/dev/null"),
+  ("Ghostview", EXEC, "ghostview %a(Enter file to view)"),
+  ("Xpdf", EXEC, "xpdf %a(Enter PDF to view)"),
+  ("Abiword", EXEC, "abiword"),
+  ("Dia", EXEC, "dia"),
+  ("OpenOffice.org",
+   ("OpenOffice.org", EXEC, "ooffice"),
+   ("Writer", EXEC, "oowriter"),
+   ("Spreadsheet", EXEC, "oocalc"),
+   ("Draw", EXEC, "oodraw"),
+   ("Impress", EXEC, "ooimpress")
+  ),
+  ("Editors",
+   ("XEmacs", EXEC, "xemacs"),
+   ("Emacs", EXEC, "emacs"),
+   ("XJed", EXEC, "xjed"),
+   ("VI", EXEC, "xterm -e vi"),
+   ("GVIM", EXEC, "gvim"),
+   ("NEdit", EXEC, "nedit"),
+   ("Xedit", EXEC, "xedit")
+  ),
+  ("Multimedia",
+   ("XMMS", 
+    ("XMMS", EXEC, "xmms"),
+    ("XMMS play/pause", EXEC, "xmms -t"),
+    ("XMMS stop", EXEC, "xmms -s")
+   ),
+   ("Xine video player", EXEC, "xine"),
+   ("MPlayer", EXEC, "mplayer")
+  )
+ ),
+ ("Utils",
+  ("Calculator", EXEC, "xcalc"),
+  ("Window Properties", SHEXEC, "xprop | xmessage -center -title 'xprop' -file -"),
+  ("Font Chooser", EXEC, "xfontsel"),
+  ("Magnify", EXEC, "wmagnify"),
+  ("Colormap", EXEC, "xcmap"),
+  ("Kill X Application", EXEC, "xkill")
+ ),
+ ("Selection",
+  ("Copy", SHEXEC, "echo '%s' | wxcopy"),
+  ("Mail To", EXEC, "xterm -name mail -T Pine -e pine %s"),
+  ("Navigate", EXEC, "mozilla %s"),
+  ("Search in Manual", EXEC, "MANUAL_SEARCH(%s)")
+ ),
+ ("Commands",
+  ("Hide Others", HIDE_OTHERS),
+  ("Show All", SHOW_ALL),
+  ("Arrange Icons", ARRANGE_ICONS),
+  ("Refresh", REFRESH),
+  ("Lock", EXEC, "xlock -allowroot -usefirst")
+ ),
+ ("Appearance",
+  ("Themes", OPEN_MENU, "-noext #wmdatadir#/Themes $HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle"),
+  ("Styles", OPEN_MENU, "-noext #wmdatadir#/Styles $HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle"),
+  ("Icon Sets", OPEN_MENU, "-noext #wmdatadir#/IconSets $HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons"),
+  ("Background",
+   ("Solid",
+	("Black", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, black)'"),
+	("Blue",  EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#505075\")'"),
+	("Indigo", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#243e6c\")'"),
+	("Bluemarine", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#224477\")'"),
+	("Purple", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#554466\")'"),
+	("Wheat", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, wheat4)'"),
+	("Dark Gray", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#333340\")'"),
+	("Wine", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#400020\")'")
+   ),
+   ("Gradient",
+	("Sunset", EXEC, "wdwrite WindowMaker WorkspaceBack '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'"),
+	("Sky", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, blue4, white)'"),
+	("Blue Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#7080a5\", \"#101020\")'"),
+	("Indigo Shades", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#746ebc\", \"#242e4c\")'"),
+	("Purple Shades", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#654c66\", \"#151426\")'"),
+	("Wheat Shades",  EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#a09060\", \"#302010\")'"),
+	("Grey Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#636380\", \"#131318\")'"),
+	("Wine Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#600040\", \"#180010\")'")
+   ),
+   ("Images", OPEN_MENU, "-noext #wmdatadir#/Backgrounds $HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t")
+   ),   
+   ("Save Theme", SHEXEC, "getstyle -t $HOME/GNUstep/Library/WindowMaker/Themes/\"%a(Theme name)\""),
+   ("Save IconSet", SHEXEC, "geticonset $HOME/GNUstep/Library/WindowMaker/IconSets/\"%a(IconSet name)\""),
+   ("Preferences Utility", EXEC, "/usr/local/GNUstep/Applications/WPrefs.app/WPrefs")
+   ), 
+   ("Session",
+    ("Save Session", SAVE_SESSION),
+    ("Clear Session", CLEAR_SESSION),
+	("Restart Window Maker", RESTART),
+	("Start BlackBox", RESTART, blackbox),
+	("Start IceWM", RESTART, icewm),
+	("Exit", EXIT)
+   )
+)
--- a/WindowMaker/plmenu.bg	Sat Dec 13 13:57:40 2008 -0800
+++ b/WindowMaker/plmenu.bg	Sat Dec 13 14:10:41 2008 -0800
@@ -1,106 +1,106 @@
-("Приложения",
- ("Инфо",
-  ("Информационен панел...", INFO_PANEL),
-  ("Лицензионен панел...", LEGAL_PANEL),
-  ("Системна конзола", EXEC, "xconsole"),
-  ("Натоварване на системата", SHEXEC, "xosview || xload"),
-  ("Списък на процесите", EXEC, "xterm -e top"),
-  ("Ръководства", EXEC, "xman")
-  ),
- ("Стартирай...", SHEXEC, "%a(Run,Въведете команда, която да се стартира:)"),
- ("XTerm", EXEC, "xterm -sb"),
- ("Rxvt", EXEC, "rxvt -bg black -fg white -fn fixed"),
- ("Работни места", WORKSPACE_MENU),
- ("Приложения",
-  ("Графични",
-   ("Gimp", SHEXEC, "gimp >/dev/null"),
-   ("XV", EXEC, "xv"),
-   ("XPaint", EXEC, "xpaint"),
-   ("XFig", EXEC, "xfig")
-   ),
-  ("X File Manager", EXEC, "xfm"),
-  ("OffiX Files", EXEC, "files"),
-  ("LyX", EXEC, "lyx"),
-  ("Netscape", EXEC, "netscape"),
-  ("Ghostview", EXEC, "ghostview %a(Enter file to view)"),
-  ("Acrobat", EXEC, "/usr/local/Acrobat3/bin/acroread %a(Enter PDF to view)"),
-  ("TkDesk", EXEC, "tkdesk")
-  ),
- ("Редактори",
-  ("XFte", EXEC, "xfte"),
-  ("XEmacs", SHEXEC, "xemacs || emacs"),
-  ("XJed", EXEC, "xjed"),
-  ("NEdit", EXEC, "nedit"),
-  ("Xedit", EXEC, "xedit"),
-  ("VI", EXEC, "xterm -e vi")
-  ),
- ("Разни",
-  ("Xmcd", SHEXEC, "xmcd 2> /dev/null"),
-  ("Xplaycd", EXEC, "xplaycd"),
-  ("Xmixer", EXEC, "xmixer")
-  ),
- ("Инструменти",
-  ("Калкулатор", EXEC, "xcalc"),
-  ("Свойства на прозореца", SHEXEC, "xprop | xmessage -center -title 'xprop' -file -"),
-  ("Избор на шрифт", EXEC, "xfontsel"),
-  ("Емулатор на терминал", EXEC, "xminicom"),
-  ("Лупа", EXEC, "xmag"),
-  ("Цветна палитра", EXEC, "xcmap"),
-  ("XKill", EXEC, "xkill"),
-  ("ASClock", EXEC, "asclock -shape"),
-  ("Clipboard", EXEC, "xclipboard")
-  ),
- ("Избор",
-  ("Copy", SHEXEC, "echo '%s' | wxcopy"),
-  ("Mail To", EXEC, "xterm -name mail -T Pine -e pine %s"),
-  ("Navigate", EXEC, "netscape %s"),
-  ("Search in Manual", EXEC, "MANUAL_SEARCH(%s)")
-  ),
- ("Работно място",
-  ("Скрий другите", HIDE_OTHERS),
-  ("Покажи всички", SHOW_ALL),
-  ("Подреди иконките", ARRANGE_ICONS),
-  ("Опресни", REFRESH),
-  ("Заключи", EXEC, "xlock -allowroot -usefirst"),
-  ("Запази сесията", SAVE_SESSION),
-  ("Изчисти запазената сесия", CLEAR_SESSION)
-  ),
- ("Изглед",
-  ("Теми", OPEN_MENU, "-noext #wmdatadir#/Themes $HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle"),
-  ("Стилове", OPEN_MENU, "-noext #wmdatadir#/Styles $HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle"),
-  ("Колекции иконки", OPEN_MENU, "-noext #wmdatadir#/IconSets $HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons"),
-  ("Фон",
-   ("Плътен",
-    ("Черен", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, black)'"),
-    ("Син",  EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#505075\")'"),
-    ("Тъмнолилав", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#243e6c\")'"),
-    ("Ясно синьо", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#180090\")'"),
-    ("Мораво", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#554466\")'"),
-    ("Пшенично", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, wheat4)'"),
-    ("Тъмно сиво", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#333340\")'"),
-    ("Винено", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#400020\")'")
-    ),
-   ("Градиент",
-    ("Слънце", EXEC, "wdwrite WindowMaker WorkspaceBack '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'"),
-    ("Небе", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, blue4, white)'"),
-    ("Сини сенки",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#7080a5\", \"#101020\")'"),
-    ("Лилави сенки", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#746ebc\", \"#242e4c\")'"),
-    ("Морави сенки", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#654c66\", \"#151426\")'"),
-    ("Пшенични сенки",  EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#a09060\", \"#302010\")'"),
-    ("Сиви сенки",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#636380\", \"#131318\")'"),
-    ("Винени сенки",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#600040\", \"#180010\")'")
-    ),
-   ("Изображения", OPEN_MENU, "-noext #wmdatadir#/Backgrounds $HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t")
-   ),   
-  ("Запази темата", SHEXEC, "getstyle -t $HOME/GNUstep/Library/WindowMaker/Themes/\"%a(Theme name)\""),
-  ("Запази колекцията иконки", SHEXEC, "geticonset $HOME/GNUstep/Library/WindowMaker/IconSets/\"%a(IconSet name)\""),
-  ("Пособие за настройки", EXEC, "/usr/local/GNUstep/Applications/WPrefs.app/WPrefs")
-  ), 
- ("Изход",
-  ("Рестартиране", RESTART),
-  ("Стартирай BlackBox", RESTART, blackbox),
-  ("Стартирай kwm", RESTART, kwm),
-  ("Стартирай IceWM", RESTART, icewm),
-  ("Изход...", EXIT)
- )
-)
\ No newline at end of file
+("Приложения",
+ ("Инфо",
+  ("Информационен панел...", INFO_PANEL),
+  ("Лицензионен панел...", LEGAL_PANEL),
+  ("Системна конзола", EXEC, "xconsole"),
+  ("Натоварване на системата", SHEXEC, "xosview || xload"),
+  ("Списък на процесите", EXEC, "xterm -e top"),
+  ("Ръководства", EXEC, "xman")
+  ),
+ ("Стартирай...", SHEXEC, "%A(Run,Въведете команда, която да се стартира:)"),
+ ("XTerm", EXEC, "xterm -sb"),
+ ("Rxvt", EXEC, "rxvt -bg black -fg white -fn fixed"),
+ ("Работни места", WORKSPACE_MENU),
+ ("Приложения",
+  ("Графични",
+   ("Gimp", SHEXEC, "gimp >/dev/null"),
+   ("XV", EXEC, "xv"),
+   ("XPaint", EXEC, "xpaint"),
+   ("XFig", EXEC, "xfig")
+   ),
+  ("X File Manager", EXEC, "xfm"),
+  ("OffiX Files", EXEC, "files"),
+  ("LyX", EXEC, "lyx"),
+  ("Netscape", EXEC, "netscape"),
+  ("Ghostview", EXEC, "ghostview %a(Enter file to view)"),
+  ("Acrobat", EXEC, "/usr/local/Acrobat3/bin/acroread %a(Enter PDF to view)"),
+  ("TkDesk", EXEC, "tkdesk")
+  ),
+ ("Редактори",
+  ("XFte", EXEC, "xfte"),
+  ("XEmacs", SHEXEC, "xemacs || emacs"),
+  ("XJed", EXEC, "xjed"),
+  ("NEdit", EXEC, "nedit"),
+  ("Xedit", EXEC, "xedit"),
+  ("VI", EXEC, "xterm -e vi")
+  ),
+ ("Разни",
+  ("Xmcd", SHEXEC, "xmcd 2> /dev/null"),
+  ("Xplaycd", EXEC, "xplaycd"),
+  ("Xmixer", EXEC, "xmixer")
+  ),
+ ("Инструменти",
+  ("Калкулатор", EXEC, "xcalc"),
+  ("Свойства на прозореца", SHEXEC, "xprop | xmessage -center -title 'xprop' -file -"),
+  ("Избор на шрифт", EXEC, "xfontsel"),
+  ("Емулатор на терминал", EXEC, "xminicom"),
+  ("Лупа", EXEC, "xmag"),
+  ("Цветна палитра", EXEC, "xcmap"),
+  ("XKill", EXEC, "xkill"),
+  ("ASClock", EXEC, "asclock -shape"),
+  ("Clipboard", EXEC, "xclipboard")
+  ),
+ ("Избор",
+  ("Copy", SHEXEC, "echo '%s' | wxcopy"),
+  ("Mail To", EXEC, "xterm -name mail -T Pine -e pine %s"),
+  ("Navigate", EXEC, "netscape %s"),
+  ("Search in Manual", EXEC, "MANUAL_SEARCH(%s)")
+  ),
+ ("Работно място",
+  ("Скрий другите", HIDE_OTHERS),
+  ("Покажи всички", SHOW_ALL),
+  ("Подреди иконките", ARRANGE_ICONS),
+  ("Опресни", REFRESH),
+  ("Заключи", EXEC, "xlock -allowroot -usefirst"),
+  ("Запази сесията", SAVE_SESSION),
+  ("Изчисти запазената сесия", CLEAR_SESSION)
+  ),
+ ("Изглед",
+  ("Теми", OPEN_MENU, "-noext #wmdatadir#/Themes $HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle"),
+  ("Стилове", OPEN_MENU, "-noext #wmdatadir#/Styles $HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle"),
+  ("Колекции иконки", OPEN_MENU, "-noext #wmdatadir#/IconSets $HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons"),
+  ("Фон",
+   ("Плътен",
+    ("Черен", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, black)'"),
+    ("Син",  EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#505075\")'"),
+    ("Тъмнолилав", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#243e6c\")'"),
+    ("Ясно синьо", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#180090\")'"),
+    ("Мораво", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#554466\")'"),
+    ("Пшенично", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, wheat4)'"),
+    ("Тъмно сиво", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#333340\")'"),
+    ("Винено", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#400020\")'")
+    ),
+   ("Градиент",
+    ("Слънце", EXEC, "wdwrite WindowMaker WorkspaceBack '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'"),
+    ("Небе", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, blue4, white)'"),
+    ("Сини сенки",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#7080a5\", \"#101020\")'"),
+    ("Лилави сенки", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#746ebc\", \"#242e4c\")'"),
+    ("Морави сенки", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#654c66\", \"#151426\")'"),
+    ("Пшенични сенки",  EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#a09060\", \"#302010\")'"),
+    ("Сиви сенки",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#636380\", \"#131318\")'"),
+    ("Винени сенки",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#600040\", \"#180010\")'")
+    ),
+   ("Изображения", OPEN_MENU, "-noext #wmdatadir#/Backgrounds $HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t")
+   ),   
+  ("Запази темата", SHEXEC, "getstyle -t $HOME/GNUstep/Library/WindowMaker/Themes/\"%a(Theme name)\""),
+  ("Запази колекцията иконки", SHEXEC, "geticonset $HOME/GNUstep/Library/WindowMaker/IconSets/\"%a(IconSet name)\""),
+  ("Пособие за настройки", EXEC, "/usr/local/GNUstep/Applications/WPrefs.app/WPrefs")
+  ), 
+ ("Изход",
+  ("Рестартиране", RESTART),
+  ("Стартирай BlackBox", RESTART, blackbox),
+  ("Стартирай kwm", RESTART, kwm),
+  ("Стартирай IceWM", RESTART, icewm),
+  ("Изход...", EXIT)
+ )
+)
--- a/WindowMaker/plmenu.es	Sat Dec 13 13:57:40 2008 -0800
+++ b/WindowMaker/plmenu.es	Sat Dec 13 14:10:41 2008 -0800
@@ -7,7 +7,7 @@
   ("Lista de Procesos", EXEC, "xterm -e top"),
   ("Paginas del Manual", EXEC, "xman")
   ),
- ("Ejecutar...", SHEXEC, "%a(Run,Type command to run:)"),
+ ("Ejecutar...", SHEXEC, "%A(Run,Type command to run:)"),
  ("XTerm", EXEC, "xterm -sb"),
  ("Rxvt", EXEC, "rxvt -bg black -fg white -fn fixed"),
  ("Espacio de Trabajo", WORKSPACE_MENU),
--- a/WindowMaker/plmenu.ja	Sat Dec 13 13:57:40 2008 -0800
+++ b/WindowMaker/plmenu.ja	Sat Dec 13 14:10:41 2008 -0800
@@ -7,7 +7,7 @@
   ("プロセス一覧", EXEC, "xterm -e top"),
   ("マニュアルブラウザ", EXEC, "xman")
   ),
- ("コマンド実行", SHEXEC, "%a(Run,Type command to run:)"),
+ ("コマンド実行", SHEXEC, "%A(Run,Type command to run:)"),
  ("KTerm", EXEC, "kterm -sb"),
  ("Rxvt", EXEC, "rxvt -bg black -fg white"),
  ("ワークスペース", WORKSPACE_MENU),
--- a/src/WindowMaker.h	Sat Dec 13 13:57:40 2008 -0800
+++ b/src/WindowMaker.h	Sat Dec 13 14:10:41 2008 -0800
@@ -475,6 +475,8 @@
     RImage *swtileImage;
     RImage *swbackImage[9];
 
+    int history_lines;
+ 
     struct {
         unsigned int nodock:1;	       /* don't display the dock */
         unsigned int noclip:1;         /* don't display the clip */
--- a/src/defaults.c	Sat Dec 13 13:57:40 2008 -0800
+++ b/src/defaults.c	Sat Dec 13 14:10:41 2008 -0800
@@ -860,6 +860,9 @@
     },
     {"SelectCursor", "(builtin, cross)",	(void*)WCUR_SELECT,
     NULL,				getCursor,	setCursor
+    },
+    {"DialogHistoryLines",	"500",		NULL,
+    &wPreferences.history_lines,	getInt,		NULL
     }
 };
 
--- a/src/dialog.c	Sat Dec 13 13:57:40 2008 -0800
+++ b/src/dialog.c	Sat Dec 13 14:10:41 2008 -0800
@@ -178,6 +178,328 @@
     return result;
 }
 
+typedef struct _WMInputPanelWithHistory
+{
+    WMInputPanel *panel;
+    WMArray *history;
+    int histpos;
+    char *prefix;
+    char *suffix;
+    char *rest;
+    WMArray *variants;
+    int varpos;
+} WMInputPanelWithHistory;
+
+static char *
+HistoryFileName(char *name)
+{
+    char *filename = NULL;
+
+    filename = wstrdup(wusergnusteppath());
+    filename = wstrappend(filename, "/.AppInfo/WindowMaker/History");
+    if(name && strlen(name)) {
+        filename = wstrappend(filename, ".");
+        filename = wstrappend(filename, name);
+    }
+    return filename;
+}
+
+static int
+matchString(void *str1, void *str2)
+{
+    return (strcmp((char*)str1, (char*)str2)==0 ? 1 : 0);
+}
+
+static WMArray *
+LoadHistory(char *filename, int max)
+{
+    WMPropList *plhistory;
+    WMPropList *plitem;
+    WMArray *history;
+    int i, num;
+
+    history = WMCreateArrayWithDestructor(1, wfree);
+    WMAddToArray(history, wstrdup(""));
+
+    plhistory = WMReadPropListFromFile((char*)filename);
+
+    if(plhistory && WMIsPLArray(plhistory)) {
+        num = WMGetPropListItemCount(plhistory);
+        if(num > max) num = max;
+
+        for(i = 0; i < num; ++i) {
+            plitem = WMGetFromPLArray(plhistory, i);
+            if(WMIsPLString(plitem) && WMFindInArray(history, matchString,
+				    WMGetFromPLString(plitem)) == WANotFound)
+                WMAddToArray(history, WMGetFromPLString(plitem));
+        }
+    }
+
+    return history;
+}
+
+static void
+SaveHistory(WMArray *history, char *filename)
+{
+    int i;
+    WMPropList *plhistory;
+
+    plhistory = WMCreatePLArray(NULL);
+
+    for(i = 0; i < WMGetArrayItemCount(history); ++i)
+        WMAddToPLArray(plhistory,
+            WMCreatePLString(WMGetFromArray(history, i)));
+
+    WMWritePropListToFile(plhistory, (char*)filename, False);
+    WMReleasePropList(plhistory);
+}
+
+static int
+strmatch(const char *str1, const char *str2)
+{
+    return !strcmp(str1, str2);
+}
+
+static int
+pstrcmp(const char **str1, const char **str2)
+{
+    return strcmp(*str1, *str2);
+}
+
+static void
+ScanFiles(const char *dir, const char *prefix, unsigned acceptmask,
+        unsigned declinemask, WMArray *result)
+{
+    int prefixlen;
+    DIR *d;
+    struct dirent *de;
+    struct stat sb;
+    char *fullfilename, *suffix;
+
+    prefixlen = strlen(prefix);
+    if((d = opendir(dir)) != NULL) {
+        while((de = readdir(d)) != NULL) {
+            if(strlen(de->d_name) > prefixlen &&
+                    !strncmp(prefix, de->d_name, prefixlen) &&
+                    strcmp(de->d_name, ".") != 0 &&
+                    strcmp(de->d_name, "..")) {
+                fullfilename = wstrconcat((char*)dir, "/");
+                fullfilename = wstrappend(fullfilename, de->d_name);
+
+                if(stat(fullfilename, &sb) == 0 &&
+                        (sb.st_mode & acceptmask) &&
+                        !(sb.st_mode & declinemask) &&
+                        WMFindInArray(result, (WMMatchDataProc*)strmatch,
+                            de->d_name + prefixlen) == WANotFound) {
+                    suffix = wstrdup(de->d_name + prefixlen);
+                    WMAddToArray(result, suffix);
+                }
+                wfree(fullfilename);
+            }
+        }
+        closedir(d);
+    }
+}
+
+static WMArray *
+GenerateVariants(const char * complete)
+{
+    Bool firstWord = True;
+    WMArray *variants = NULL;
+    char *pos = NULL, *path = NULL, *tmp = NULL, *dir = NULL, *prefix = NULL;
+
+    variants = WMCreateArrayWithDestructor(0, wfree);
+
+    while(*complete == ' ') ++complete;
+
+    if((pos = strrchr(complete, ' ')) != NULL) {
+        complete = pos + 1;
+        firstWord = False;
+    }
+
+    if((pos = strrchr(complete, '/')) != NULL) {
+        tmp = wstrndup((char*)complete, pos - complete + 1);
+        if(*tmp == '~' && *(tmp+1) == '/' && getenv("HOME")) {
+            dir = wstrdup(getenv("HOME"));
+            dir = wstrappend(dir, tmp + 1);
+            wfree(tmp);
+        } else {
+            dir = tmp;
+        }
+        prefix = wstrdup(pos + 1);
+        ScanFiles(dir, prefix, (unsigned)-1, 0, variants);
+        wfree(dir);
+        wfree(prefix);
+    } else if(*complete == '~') {
+        WMAddToArray(variants, wstrdup("/"));
+    } else if(firstWord) {
+        path = getenv("PATH");
+        while(path) {
+            pos = strchr(path, ':');
+            if(pos) {
+                tmp = wstrndup(path, pos - path);
+                path = pos + 1;
+            } else if(*path != '\0') {
+                tmp = wstrdup(path);
+                path = NULL;
+            } else break;
+            ScanFiles(tmp, complete,
+                    S_IXOTH | S_IXGRP | S_IXUSR, S_IFDIR, variants);
+            wfree(tmp);
+        }
+    }
+
+    WMSortArray(variants, (WMCompareDataProc*)pstrcmp);
+    return variants;
+}
+
+static void
+handleHistoryKeyPress(XEvent *event, void *clientData)
+{
+    char *text;
+    unsigned pos;
+    WMInputPanelWithHistory *p = (WMInputPanelWithHistory*)clientData;
+    KeySym ksym;
+
+    ksym = XLookupKeysym(&event->xkey, 0);
+
+    switch(ksym)
+    {
+        case XK_Up:
+            if(p->histpos < WMGetArrayItemCount(p->history) - 1) {
+                if(p->histpos == 0)
+                    wfree(WMReplaceInArray(p->history,
+                        0, WMGetTextFieldText(p->panel->text)));
+                p->histpos++;
+                WMSetTextFieldText(p->panel->text,
+                    WMGetFromArray(p->history, p->histpos));
+            }
+            break;
+        case XK_Down:
+            if(p->histpos > 0) {
+                p->histpos--;
+                WMSetTextFieldText(p->panel->text,
+                    WMGetFromArray(p->history, p->histpos));
+            }
+            break;
+        case XK_Tab:
+            if(!p->variants) {
+                text = WMGetTextFieldText(p->panel->text);
+		pos = WMGetTextFieldCursorPosition(p->panel->text);
+		p->prefix = wstrndup(text, pos);
+		p->suffix = wstrdup(text + pos);
+		wfree(text);
+                p->variants = GenerateVariants(p->prefix);
+                p->varpos = 0;
+                if(!p->variants) {
+                    wfree(p->prefix);
+                    wfree(p->suffix);
+                    p->prefix = NULL;
+                    p->suffix = NULL;
+                }
+            }
+            if(p->variants && p->prefix && p->suffix) {
+                p->varpos++;
+                if(p->varpos > WMGetArrayItemCount(p->variants))
+                    p->varpos = 0;
+                if(p->varpos > 0)
+                    text = wstrconcat(p->prefix,
+                        WMGetFromArray(p->variants, p->varpos - 1));
+		else
+                    text = wstrdup(p->prefix);
+		pos = strlen(text);
+                text = wstrappend(text, p->suffix);
+                WMSetTextFieldText(p->panel->text, text);
+		WMSetTextFieldCursorPosition(p->panel->text, pos);
+                wfree(text);
+            }
+            break;
+    }
+    if(ksym != XK_Tab) {
+        if(p->prefix) {
+            wfree(p->prefix);
+            p->prefix = NULL;
+        }
+        if(p->suffix) {
+            wfree(p->suffix);
+            p->suffix = NULL;
+        }
+        if(p->variants) {
+            WMFreeArray(p->variants);
+            p->variants = NULL;
+        }
+    }
+}
+
+int
+wAdvancedInputDialog(WScreen *scr, char *title, char *message,
+            char *name, char **text)
+{
+    WWindow *wwin;
+    Window parent;
+    char *result;
+    WMPoint center;
+    WMInputPanelWithHistory *p;
+    char *filename;
+
+    filename = HistoryFileName(name);
+    p = wmalloc(sizeof(WMInputPanelWithHistory));
+    p->panel = WMCreateInputPanel(scr->wmscreen, NULL, title, message, *text,
+			       _("OK"), _("Cancel"));
+    p->history = LoadHistory(filename, wPreferences.history_lines);
+    p->histpos = 0;
+    p->prefix = NULL;
+    p->suffix = NULL;
+    p->rest = NULL;
+    p->variants = NULL;
+    p->varpos = 0;
+    WMCreateEventHandler(WMWidgetView(p->panel->text), KeyPressMask,
+        handleHistoryKeyPress, p);
+
+    parent = XCreateSimpleWindow(dpy, scr->root_win, 0, 0, 320, 160, 0, 0, 0);
+    XSelectInput(dpy, parent, KeyPressMask|KeyReleaseMask);
+
+    XReparentWindow(dpy, WMWidgetXID(p->panel->win), parent, 0, 0);
+
+    center = getCenter(scr, 320, 160);
+    wwin = wManageInternalWindow(scr, parent, None, NULL, center.x, center.y,
+				 320, 160);
+
+    wwin->client_leader = WMWidgetXID(p->panel->win);
+
+    WMMapWidget(p->panel->win);
+
+    wWindowMap(wwin);
+
+    WMRunModalLoop(WMWidgetScreen(p->panel->win), WMWidgetView(p->panel->win));
+
+    if (p->panel->result == WAPRDefault) {
+	result = WMGetTextFieldText(p->panel->text);
+        wfree(WMReplaceInArray(p->history, 0, wstrdup(result)));
+        SaveHistory(p->history, filename);
+    }
+    else
+	result = NULL;
+
+    wUnmanageWindow(wwin, False, False);
+
+    WMDestroyInputPanel(p->panel);
+    WMFreeArray(p->history);
+    wfree(p);
+    wfree(filename);
+
+    XDestroyWindow(dpy, parent);
+
+    if (result==NULL)
+	return False;
+    else {
+        if (*text)
+            wfree(*text);
+        *text = result;
+
+        return True;
+    }
+}
 
 int
 wInputDialog(WScreen *scr, char *title, char *message, char **text)
--- a/src/dialog.h	Sat Dec 13 13:57:40 2008 -0800
+++ b/src/dialog.h	Sat Dec 13 14:10:41 2008 -0800
@@ -33,6 +33,7 @@
 
 int wMessageDialog(WScreen *scr, char *title, char *message,
                    char *defBtn, char *altBtn, char *othBtn);
+int wAdvancedInputDialog(WScreen *scr, char *title, char *message, char *name, char **text);
 int wInputDialog(WScreen *scr, char *title, char *message, char **text);
 
 int wExitDialog(WScreen *scr, char *title, char *message, char *defBtn,
--- a/src/misc.c	Sat Dec 13 13:57:40 2008 -0800
+++ b/src/misc.c	Sat Dec 13 14:10:41 2008 -0800
@@ -607,96 +607,59 @@
 
 
 static char*
-getuserinput(WScreen *scr, char *line, int *ptr)
+parseuserinputpart(char *line, int *ptr, char *endchars)
 {
-    char *ret;
-    char *title;
-    char *prompt;
-    int j, state;
-    int begin = 0;
-#define BUFSIZE 512
-    char tbuffer[BUFSIZE], pbuffer[BUFSIZE];
+	int depth = 0, begin;
+	char *value = NULL;
+	begin = ++*ptr;
 
+	while(line[*ptr] != '\0') {
+		if(line[*ptr] == '(') {
+			++depth;
+		} else if(depth > 0 && line[*ptr] == ')') {
+			--depth;
+		} else if(depth == 0 && strchr(endchars, line[*ptr]) != NULL) {
+			value = wmalloc(*ptr - begin + 1);
+			strncpy(value, line + begin, *ptr - begin);
+			value[*ptr - begin] = '\0';
+			break;
+		}
+		++*ptr;
+	}
 
-    title = _("Program Arguments");
-    prompt = _("Enter command arguments:");
-    ret = NULL;
-
-#define _STARTING 0
-#define _TITLE 1
-#define _PROMPT 2
-#define _DONE 3
-
-    state = _STARTING;
-    j = 0;
-    for (; line[*ptr]!=0 && state!=_DONE; (*ptr)++) {
-        switch (state) {
-        case _STARTING:
-            if (line[*ptr]=='(') {
-                state = _TITLE;
-                begin = *ptr+1;
-            } else {
-                state = _DONE;
-            }
-            break;
-
-        case _TITLE:
-            if (j <= 0 && line[*ptr]==',') {
-
-                j = 0;
-                if (*ptr > begin) {
-                    strncpy(tbuffer, &line[begin], WMIN(*ptr-begin, BUFSIZE));
-                    tbuffer[WMIN(*ptr-begin, BUFSIZE)] = 0;
-                    title = (char*)tbuffer;
-                }
-                begin = *ptr+1;
-                state = _PROMPT;
-
-            } else if (j <= 0 && line[*ptr]==')') {
-
-                if (*ptr > begin) {
-                    strncpy(tbuffer, &line[begin], WMIN(*ptr-begin, BUFSIZE));
-                    tbuffer[WMIN(*ptr-begin, BUFSIZE)] = 0;
-                    title = (char*)tbuffer;
-                }
-                state = _DONE;
-
-            } else if (line[*ptr]=='(') {
-                j++;
-            } else if (line[*ptr]==')') {
-                j--;
-            }
-
-            break;
-
-        case _PROMPT:
-            if (line[*ptr]==')' && j==0) {
-
-                if (*ptr-begin > 1) {
-                    strncpy(pbuffer, &line[begin], WMIN(*ptr-begin, BUFSIZE));
-                    pbuffer[WMIN(*ptr-begin, BUFSIZE)] = 0;
-                    prompt = (char*)pbuffer;
-                }
-                state = _DONE;
-            } else if (line[*ptr]=='(')
-                j++;
-            else if (line[*ptr]==')')
-                j--;
-            break;
-        }
-    }
-    (*ptr)--;
-#undef _STARTING
-#undef _TITLE
-#undef _PROMPT
-#undef _DONE
-
-    if (!wInputDialog(scr, title, prompt, &ret))
-        return NULL;
-    else
-        return ret;
+	return value;
 }
 
+static char*
+getuserinput(WScreen *scr, char *line, int *ptr, Bool advanced)
+{
+    char *ret = NULL, *title = NULL, *prompt = NULL, *name = NULL;
+    int rv;
+
+    if(line[*ptr] == '(')
+	title = parseuserinputpart(line, ptr, ",)");
+    if(title != NULL && line[*ptr] == ',')
+	prompt = parseuserinputpart(line, ptr, ",)");
+    if(prompt != NULL && line[*ptr] == ',')
+	name = parseuserinputpart(line, ptr, ")");
+
+    if(advanced)
+        rv = wAdvancedInputDialog(scr,
+		title ? gettext(title):_("Program Arguments"),
+		prompt ? gettext(prompt):_("Enter command arguments:"),
+		name, &ret);
+    else
+        rv = wInputDialog(scr,
+		title ? gettext(title):_("Program Arguments"),
+		prompt ? gettext(prompt):_("Enter command arguments:"),
+		&ret);
+
+    if(title) wfree(title);
+    if(prompt) wfree(prompt);
+    if(name) wfree(name);
+
+    return rv ? ret : NULL;
+}
 
 #define S_NORMAL 0
 #define S_ESCAPE 1
@@ -814,8 +777,9 @@
                 break;
 
             case 'a':
+            case 'A':
                 ptr++;
-                user_input = getuserinput(scr, cmdline, &ptr);
+                user_input = getuserinput(scr, cmdline, &ptr, cmdline[ptr-1] == 'A');
                 if (user_input) {
                     slen = strlen(user_input);
                     olen += slen;

