http://bugs.gentoo.org/show_bug.cgi?id=235149

diff --git a/auth-pam.c b/auth-pam.c
index ccdb993..4a89c4f 100644
--- a/auth-pam.c
+++ b/auth-pam.c
@@ -265,7 +265,7 @@ sshpam_chauthtok_ruid(pam_handle_t *pamh, int flags)
 	if (setreuid(sshpam_authctxt->pw->pw_uid, -1) == -1)
 		fatal("%s: setreuid failed: %s", __func__, strerror(errno));
 	result = pam_chauthtok(pamh, flags);
-	if (setreuid(0, -1) == -1)
+	if (setreuid(ROOT_UID, -1) == -1)
 		fatal("%s: setreuid failed: %s", __func__, strerror(errno));
 	return result;
 }
@@ -781,7 +781,7 @@ sshpam_query(void *ctx, char **name, char **info,
 			}
 			if (type == PAM_SUCCESS) {
 				if (!sshpam_authctxt->valid ||
-				    (sshpam_authctxt->pw->pw_uid == 0 &&
+				    (sshpam_authctxt->pw->pw_uid == ROOT_UID &&
 				    options.permit_root_login != PERMIT_YES))
 					fatal("Internal error: PAM auth "
 					    "succeeded when it should have "
@@ -832,7 +832,7 @@ sshpam_respond(void *ctx, u_int num, char **resp)
 	}
 	buffer_init(&buffer);
 	if (sshpam_authctxt->valid &&
-	    (sshpam_authctxt->pw->pw_uid != 0 ||
+	    (sshpam_authctxt->pw->pw_uid != ROOT_UID ||
 	    options.permit_root_login == PERMIT_YES))
 		buffer_put_cstring(&buffer, *resp);
 	else
@@ -1195,7 +1195,7 @@ sshpam_auth_passwd(Authctxt *authctxt, const char *password)
 	 * by PermitRootLogin, use an invalid password to prevent leaking
 	 * information via timing (eg if the PAM config has a delay on fail).
 	 */
-	if (!authctxt->valid || (authctxt->pw->pw_uid == 0 &&
+	if (!authctxt->valid || (authctxt->pw->pw_uid == ROOT_UID &&
 	    options.permit_root_login != PERMIT_YES))
 		sshpam_password = badpw;
 
diff --git a/auth-passwd.c b/auth-passwd.c
index bdfced0..9683325 100644
--- a/auth-passwd.c
+++ b/auth-passwd.c
@@ -53,6 +53,7 @@
 #include "hostfile.h"
 #include "auth.h"
 #include "auth-options.h"
+#include "misc.h"
 
 extern Buffer loginmsg;
 extern ServerOptions options;
@@ -87,7 +88,8 @@ auth_password(Authctxt *authctxt, const char *password)
 #endif
 
 #ifndef HAVE_CYGWIN
-	if (pw->pw_uid == 0 && options.permit_root_login != PERMIT_YES)
+	/* hehe, the interix change would make this work on cygwin too :) */
+	if (pw->pw_uid == ROOT_UID && options.permit_root_login != PERMIT_YES)
 		ok = 0;
 #endif
 	if (*password == '\0' && options.permit_empty_passwd == 0)
diff --git a/auth-rhosts.c b/auth-rhosts.c
index 5c12967..38001ff 100644
--- a/auth-rhosts.c
+++ b/auth-rhosts.c
@@ -230,7 +230,7 @@ auth_rhosts2_raw(struct passwd *pw, const char *client_user, const char *hostnam
 		return 0;
 
 	/* If not logging in as superuser, try /etc/hosts.equiv and shosts.equiv. */
-	if (pw->pw_uid != 0) {
+	if (pw->pw_uid != ROOT_UID) {
 		if (check_rhosts_file(_PATH_RHOSTS_EQUIV, hostname, ipaddr,
 		    client_user, pw->pw_name)) {
 			auth_debug_add("Accepted for %.100s [%.100s] by /etc/hosts.equiv.",
@@ -256,7 +256,7 @@ auth_rhosts2_raw(struct passwd *pw, const char *client_user, const char *hostnam
 		return 0;
 	}
 	if (options.strict_modes &&
-	    ((st.st_uid != 0 && st.st_uid != pw->pw_uid) ||
+	    ((st.st_uid != ROOT_UID && st.st_uid != pw->pw_uid) ||
 	    (st.st_mode & 022) != 0)) {
 		logit("Rhosts authentication refused for %.100s: "
 		    "bad ownership or modes for home directory.", pw->pw_name);
@@ -283,7 +283,7 @@ auth_rhosts2_raw(struct passwd *pw, const char *client_user, const char *hostnam
 		 * allowing access to their account by anyone.
 		 */
 		if (options.strict_modes &&
-		    ((st.st_uid != 0 && st.st_uid != pw->pw_uid) ||
+		    ((st.st_uid != ROOT_UID && st.st_uid != pw->pw_uid) ||
 		    (st.st_mode & 022) != 0)) {
 			logit("Rhosts authentication refused for %.100s: bad modes for %.200s",
 			    pw->pw_name, buf);
diff --git a/auth-sia.c b/auth-sia.c
index debf302..05ecf26 100644
--- a/auth-sia.c
+++ b/auth-sia.c
@@ -160,7 +160,7 @@ session_setup_sia(struct passwd *pw, char *tty)
 
 	sia_ses_release(&ent);
 
-	setuid(0);
+	setuid(ROOT_UID);
 	permanently_set_uid(pw);
 }
 
diff --git a/auth.c b/auth.c
index 2370e5c..970b163 100644
--- a/auth.c
+++ b/auth.c
@@ -378,7 +378,7 @@ check_key_in_hostfiles(struct passwd *pw, Key *key, const char *host,
 		user_hostfile = tilde_expand_filename(userfile, pw->pw_uid);
 		if (options.strict_modes &&
 		    (stat(user_hostfile, &st) == 0) &&
-		    ((st.st_uid != 0 && st.st_uid != pw->pw_uid) ||
+		    ((st.st_uid != ROOT_UID && st.st_uid != pw->pw_uid) ||
 		    (st.st_mode & 022) != 0)) {
 			logit("Authentication refused for %.100s: "
 			    "bad owner or modes for %.200s",
@@ -431,7 +431,7 @@ secure_filename(FILE *f, const char *file, struct passwd *pw,
 
 	/* check the open file to avoid races */
 	if (fstat(fileno(f), &st) < 0 ||
-	    (st.st_uid != 0 && st.st_uid != uid) ||
+	    (st.st_uid != ROOT_UID && st.st_uid != uid) ||
 	    (st.st_mode & 022) != 0) {
 		snprintf(err, errlen, "bad ownership or modes for file %s",
 		    buf);
@@ -448,7 +448,7 @@ secure_filename(FILE *f, const char *file, struct passwd *pw,
 
 		debug3("secure_filename: checking '%s'", buf);
 		if (stat(buf, &st) < 0 ||
-		    (st.st_uid != 0 && st.st_uid != uid) ||
+		    (st.st_uid != ROOT_UID && st.st_uid != uid) ||
 		    (st.st_mode & 022) != 0) {
 			snprintf(err, errlen,
 			    "bad ownership or modes for directory %s", buf);
diff --git a/auth1.c b/auth1.c
index b8a2558..605ec80 100644
--- a/auth1.c
+++ b/auth1.c
@@ -40,6 +40,7 @@
 #endif
 #include "monitor_wrap.h"
 #include "buffer.h"
+#include "misc.h"
 
 /* import */
 extern ServerOptions options;
@@ -328,7 +329,7 @@ do_authloop(Authctxt *authctxt)
 		}
 #else
 		/* Special handling for root */
-		if (authenticated && authctxt->pw->pw_uid == 0 &&
+		if (authenticated && authctxt->pw->pw_uid == ROOT_UID &&
 		    !auth_root_allowed(meth->name)) {
  			authenticated = 0;
 # ifdef SSH_AUDIT_EVENTS
@@ -427,7 +428,7 @@ do_authentication(Authctxt *authctxt)
 	 * the server.
 	 */
 #ifndef HAVE_CYGWIN
-	if (!use_privsep && getuid() != 0 && authctxt->pw &&
+	if (!use_privsep && getuid() != ROOT_UID && authctxt->pw &&
 	    authctxt->pw->pw_uid != getuid())
 		packet_disconnect("Cannot change user when server not running as root.");
 #endif
diff --git a/auth2.c b/auth2.c
index a835abf..49c5a2f 100644
--- a/auth2.c
+++ b/auth2.c
@@ -46,6 +46,7 @@
 #include "key.h"
 #include "hostfile.h"
 #include "auth.h"
+#include "misc.h"
 #include "dispatch.h"
 #include "pathnames.h"
 #include "buffer.h"
@@ -288,7 +289,7 @@ userauth_finish(Authctxt *authctxt, int authenticated, char *method)
 		    authctxt->user);
 
 	/* Special handling for root */
-	if (authenticated && authctxt->pw->pw_uid == 0 &&
+	if (authenticated && authctxt->pw->pw_uid == ROOT_UID &&
 	    !auth_root_allowed(method)) {
 		authenticated = 0;
 #ifdef SSH_AUDIT_EVENTS
diff --git a/loginrec.c b/loginrec.c
index b411141..45857fe 100644
--- a/loginrec.c
+++ b/loginrec.c
@@ -175,6 +175,7 @@
 #include "canohost.h"
 #include "auth.h"
 #include "buffer.h"
+#include "misc.h"
 
 #ifdef HAVE_UTIL_H
 # include <util.h>
@@ -432,7 +433,7 @@ int
 login_write(struct logininfo *li)
 {
 #ifndef HAVE_CYGWIN
-	if (geteuid() != 0) {
+	if (geteuid() != ROOT_UID) {
 		logit("Attempt to write login records by non-root user (aborting)");
 		return (1);
 	}
@@ -1636,7 +1637,7 @@ record_failed_login(const char *username, const char *hostname,
 	time_t t;
 	struct stat fst;
 
-	if (geteuid() != 0)
+	if (geteuid() != ROOT_UID)
 		return;
 	if ((fd = open(_PATH_BTMP, O_WRONLY | O_APPEND)) < 0) {
 		debug("Unable to open the btmp file %s: %s", _PATH_BTMP,
@@ -1648,7 +1649,7 @@ record_failed_login(const char *username, const char *hostname,
 		    strerror(errno));
 		goto out;
 	}
-	if((fst.st_mode & (S_IRWXG | S_IRWXO)) || (fst.st_uid != 0)){
+	if((fst.st_mode & (S_IRWXG | S_IRWXO)) || (fst.st_uid != ROOT_UID)){
 		logit("Excess permission or bad ownership on file %s",
 		    _PATH_BTMP);
 		goto out;
diff --git a/logintest.c b/logintest.c
index 7e9fbbf..c58baaa 100644
--- a/logintest.c
+++ b/logintest.c
@@ -125,7 +125,7 @@ testAPI()
 	if (be_verbose)
 		dump_logininfo(li1, "li1");
 
-	if ((int)geteuid() != 0) {
+	if ((int)geteuid() != ROOT_UID) {
 		printf("NOT RUNNING LOGIN TESTS - you are not root!\n");
 		return 1;
 	}
diff --git a/misc.h b/misc.h
index 5da170d..09a3ccf 100644
--- a/misc.h
+++ b/misc.h
@@ -15,6 +15,18 @@
 #ifndef _MISC_H
 #define _MISC_H
 
+/* This one is required for propper interix support, since there the "root" user
+ * is Administrator (or maybe something else). In any case the uid of that user
+ * is 197108 (i don't know how much you have to drink before inventing such a
+ * root uid...) */
+#ifdef __INTERIX
+# define ROOT_UID 197108
+# define ROOT_GID 131616
+#else
+# define ROOT_UID 0
+# define ROOT_GID 0
+#endif
+
 /* misc.c */
 
 char	*chop(char *);
diff --git a/monitor.c b/monitor.c
index 73cf6bc..3b9b035 100644
--- a/monitor.c
+++ b/monitor.c
@@ -356,7 +356,7 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
 			if (!(ent->flags & MON_AUTHDECIDE))
 				fatal("%s: unexpected authentication from %d",
 				    __func__, ent->type);
-			if (authctxt->pw->pw_uid == 0 &&
+			if (authctxt->pw->pw_uid == ROOT_UID &&
 			    !auth_root_allowed(auth_method))
 				authenticated = 0;
 #ifdef USE_PAM
diff --git a/mux.c b/mux.c
index 79f8376..a1ea6cf 100644
--- a/mux.c
+++ b/mux.c
@@ -246,7 +246,7 @@ muxserver_accept_control(void)
 		close(client_fd);
 		return 0;
 	}
-	if ((euid != 0) && (getuid() != euid)) {
+	if ((euid != ROOT_UID) && (getuid() != euid)) {
 		error("control mode uid mismatch: peer euid %u != uid %u",
 		    (u_int) euid, (u_int) getuid());
 		close(client_fd);
diff --git a/openbsd-compat/port-aix.c b/openbsd-compat/port-aix.c
index 5b1cb73..8502cec 100644
--- a/openbsd-compat/port-aix.c
+++ b/openbsd-compat/port-aix.c
@@ -243,7 +243,7 @@ sys_auth_allowed_user(struct passwd *pw, Buffer *loginmsg)
 	 * logins via ssh) or if running as non-root user (since
 	 * loginrestrictions will always fail due to insufficient privilege).
 	 */
-	if (pw->pw_uid == 0 || geteuid() != 0) {
+	if (pw->pw_uid == ROOT_UID || geteuid() != ROOT_UID) {
 		debug3("%s: not checking", __func__);
 		return 1;
 	}
@@ -300,7 +300,7 @@ sys_auth_record_login(const char *user, const char *host, const char *ttynm,
 void
 record_failed_login(const char *user, const char *hostname, const char *ttyname)
 {
-	if (geteuid() != 0)
+	if (geteuid() != ROOT_UID)
 		return;
 
 	aix_setauthdb(user);
diff --git a/readconf.c b/readconf.c
index 73f6eb3..55562b6 100644
--- a/readconf.c
+++ b/readconf.c
@@ -242,7 +242,7 @@ add_local_forward(Options *options, const Forward *newfwd)
 	Forward *fwd;
 #ifndef NO_IPPORT_RESERVED_CONCEPT
 	extern uid_t original_real_uid;
-	if (newfwd->listen_port < IPPORT_RESERVED && original_real_uid != 0)
+	if (newfwd->listen_port < IPPORT_RESERVED && original_real_uid != ROOT_UID)
 		fatal("Privileged ports can only be forwarded by root.");
 #endif
 	if (options->num_local_forwards >= SSH_MAX_FORWARDS_PER_DIRECTION)
@@ -968,7 +968,7 @@ read_config_file(const char *filename, const char *host, Options *options,
 
 		if (fstat(fileno(f), &sb) == -1)
 			fatal("fstat %s: %s", filename, strerror(errno));
-		if (((sb.st_uid != 0 && sb.st_uid != getuid()) ||
+		if (((sb.st_uid != ROOT_UID && sb.st_uid != getuid()) ||
 		    (sb.st_mode & 022) != 0))
 			fatal("Bad owner or permissions on %s", filename);
 	}
diff --git a/serverloop.c b/serverloop.c
index 77d9dee..98bdb93 100644
--- a/serverloop.c
+++ b/serverloop.c
@@ -1119,7 +1119,7 @@ server_input_global_request(int type, u_int32_t seq, void *ctxt)
 		if (!options.allow_tcp_forwarding ||
 		    no_port_forwarding_flag
 #ifndef NO_IPPORT_RESERVED_CONCEPT
-		    || (listen_port < IPPORT_RESERVED && pw->pw_uid != 0)
+		    || (listen_port < IPPORT_RESERVED && pw->pw_uid != ROOT_UID)
 #endif
 		    ) {
 			success = 0;
diff --git a/session.c b/session.c
index 93babf9..b3c5bc2 100644
--- a/session.c
+++ b/session.c
@@ -374,7 +374,7 @@ do_authenticated1(Authctxt *authctxt)
 				break;
 			}
 			debug("Received TCP/IP port forwarding request.");
-			if (channel_input_port_forward_request(s->pw->pw_uid == 0,
+			if (channel_input_port_forward_request(s->pw->pw_uid == ROOT_UID,
 			    options.gateway_ports) < 0) {
 				debug("Port forwarding failed.");
 				break;
@@ -1062,7 +1062,7 @@ read_etc_default_login(char ***env, u_int *envsize, uid_t uid)
 	if (tmpenv == NULL)
 		return;
 
-	if (uid == 0)
+	if (uid == ROOT_UID)
 		var = child_get_env(tmpenv, "SUPATH");
 	else
 		var = child_get_env(tmpenv, "PATH");
@@ -1171,7 +1171,7 @@ do_setup_env(Session *s, const char *shell)
 #  endif /* HAVE_ETC_DEFAULT_LOGIN */
 		if (path == NULL || *path == '\0') {
 			child_set_env(&env, &envsize, "PATH",
-			    s->pw->pw_uid == 0 ?
+			    s->pw->pw_uid == ROOT_UID ?
 				SUPERUSER_PATH : _PATH_STDPATH);
 		}
 # endif /* HAVE_CYGWIN */
@@ -1373,11 +1373,11 @@ do_nologin(struct passwd *pw)
 	char buf[1024];
 
 #ifdef HAVE_LOGIN_CAP
-	if (!login_getcapbool(lc, "ignorenologin", 0) && pw->pw_uid)
+	if (!login_getcapbool(lc, "ignorenologin", 0) && pw->pw_uid != ROOT_UID)
 		f = fopen(login_getcapstr(lc, "nologin", _PATH_NOLOGIN,
 		    _PATH_NOLOGIN), "r");
 #else
-	if (pw->pw_uid)
+	if (pw->pw_uid != ROOT_UID)
 		f = fopen(_PATH_NOLOGIN, "r");
 #endif
 	if (f) {
@@ -1426,7 +1426,7 @@ safely_chroot(const char *path, uid_t uid)
 		if (stat(component, &st) != 0)
 			fatal("%s: stat(\"%s\"): %s", __func__,
 			    component, strerror(errno));
-		if (st.st_uid != 0 || (st.st_mode & 022) != 0)
+		if (st.st_uid != ROOT_UID || (st.st_mode & 022) != 0)
 			fatal("bad ownership or modes for chroot "
 			    "directory %s\"%s\"", 
 			    cp == NULL ? "" : "component ", component);
@@ -1459,7 +1459,7 @@ do_setusercontext(struct passwd *pw)
 #endif
 
 #ifndef HAVE_CYGWIN
-	if (getuid() == 0 || geteuid() == 0)
+	if (getuid() == ROOT_UID || geteuid() == ROOT_UID)
 #endif /* HAVE_CYGWIN */
 	{
 
@@ -2322,7 +2322,7 @@ session_pty_cleanup2(Session *s)
 		record_logout(s->pid, s->tty, s->pw->pw_name);
 
 	/* Release the pseudo-tty. */
-	if (getuid() == 0)
+	if (getuid() == ROOT_UID)
 		pty_release(s->tty);
 
 	/*
diff --git a/ssh-agent.c b/ssh-agent.c
index 9123cfe..fb5e76d 100644
--- a/ssh-agent.c
+++ b/ssh-agent.c
@@ -943,7 +943,7 @@ after_select(fd_set *readset, fd_set *writeset)
 					close(sock);
 					break;
 				}
-				if ((euid != 0) && (getuid() != euid)) {
+				if ((euid != ROOT_UID) && (getuid() != euid)) {
 					error("uid mismatch: "
 					    "peer euid %u != uid %u",
 					    (u_int) euid, (u_int) getuid());
diff --git a/ssh.c b/ssh.c
index e2dd67d..a6d0dcb 100644
--- a/ssh.c
+++ b/ssh.c
@@ -717,7 +717,7 @@ main(int ac, char **av)
 #ifdef HAVE_CYGWIN
 	    options.use_privileged_port,
 #else
-	    original_effective_uid == 0 && options.use_privileged_port,
+	    original_effective_uid == ROOT_UID && options.use_privileged_port,
 #endif
 	    options.proxy_command) != 0)
 		exit(255);
@@ -769,7 +769,7 @@ main(int ac, char **av)
 	 * user's home directory if it happens to be on a NFS volume where
 	 * root is mapped to nobody.
 	 */
-	if (original_effective_uid == 0) {
+	if (original_effective_uid == ROOT_UID) {
 		PRIV_START;
 		permanently_set_uid(pw);
 	}
diff --git a/sshd.c b/sshd.c
index 6e5bb54..d9fe0c5 100644
--- a/sshd.c
+++ b/sshd.c
@@ -648,7 +648,7 @@ privsep_preauth(Authctxt *authctxt)
 		close(pmonitor->m_sendfd);
 
 		/* Demote the child */
-		if (getuid() == 0 || geteuid() == 0)
+		if (getuid() == ROOT_UID || geteuid() == ROOT_UID)
 			privsep_preauth_child();
 		setproctitle("%s", "[net]");
 	}
@@ -663,7 +663,7 @@ privsep_postauth(Authctxt *authctxt)
 #ifdef DISABLE_FD_PASSING
 	if (1) {
 #else
-	if (authctxt->pw->pw_uid == 0 || options.use_login) {
+	if (authctxt->pw->pw_uid == ROOT_UID || options.use_login) {
 #endif
 		/* File descriptor passing is broken or root login */
 		use_privsep = 0;
@@ -1273,7 +1273,7 @@ main(int ac, char **av)
 	av = saved_argv;
 #endif
 
-	if (geteuid() == 0 && setgroups(0, NULL) == -1)
+	if (geteuid() == ROOT_UID && setgroups(0, NULL) == -1)
 		debug("setgroups(): %.200s", strerror(errno));
 
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
@@ -1578,7 +1578,7 @@ main(int ac, char **av)
 		    (st.st_uid != getuid () ||
 		    (st.st_mode & (S_IWGRP|S_IWOTH)) != 0))
 #else
-		if (st.st_uid != 0 || (st.st_mode & (S_IWGRP|S_IWOTH)) != 0)
+		if (st.st_uid != ROOT_UID || (st.st_mode & (S_IWGRP|S_IWOTH)) != 0)
 #endif
 			fatal("%s must be owned by root and not group or "
 			    "world-writable.", _PATH_PRIVSEP_CHROOT_DIR);
diff --git a/sshpty.c b/sshpty.c
index 5a0d1a7..afd9785 100644
--- a/sshpty.c
+++ b/sshpty.c
@@ -78,7 +78,7 @@ pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, size_t namebuflen)
 void
 pty_release(const char *tty)
 {
-	if (chown(tty, (uid_t) 0, (gid_t) 0) < 0)
+	if (chown(tty, (uid_t) ROOT_UID, (gid_t) ROOT_GID) < 0)
 		error("chown %.100s 0 0 failed: %.100s", tty, strerror(errno));
 	if (chmod(tty, (mode_t) 0666) < 0)
 		error("chmod %.100s 0666 failed: %.100s", tty, strerror(errno));
@@ -224,7 +224,7 @@ pty_setowner(struct passwd *pw, const char *tty)
 	if (st.st_uid != pw->pw_uid || st.st_gid != gid) {
 		if (chown(tty, pw->pw_uid, gid) < 0) {
 			if (errno == EROFS &&
-			    (st.st_uid == pw->pw_uid || st.st_uid == 0))
+			    (st.st_uid == pw->pw_uid || st.st_uid == ROOT_UID))
 				debug("chown(%.100s, %u, %u) failed: %.100s",
 				    tty, (u_int)pw->pw_uid, (u_int)gid,
 				    strerror(errno));
diff --git a/uidswap.c b/uidswap.c
index 91d878c..81e48ec 100644
--- a/uidswap.c
+++ b/uidswap.c
@@ -26,6 +26,7 @@
 #include "log.h"
 #include "uidswap.h"
 #include "xmalloc.h"
+#include "misc.h"
 
 /*
  * Note: all these functions must work in all of the following cases:
@@ -66,13 +67,13 @@ temporarily_use_uid(struct passwd *pw)
 	    (u_int)pw->pw_uid, (u_int)pw->pw_gid,
 	    (u_int)saved_euid, (u_int)saved_egid);
 #ifndef HAVE_CYGWIN
-	if (saved_euid != 0) {
+	if (saved_euid != ROOT_UID) {
 		privileged = 0;
 		return;
 	}
 #endif
 #else
-	if (geteuid() != 0) {
+	if (geteuid() != ROOT_UID) {
 		privileged = 0;
 		return;
 	}
@@ -250,7 +251,7 @@ permanently_set_uid(struct passwd *pw)
 
 #ifndef HAVE_CYGWIN
 	/* Try restoration of GID if changed (test clearing of saved gid) */
-	if (old_gid != pw->pw_gid && pw->pw_uid != 0 &&
+	if (old_gid != pw->pw_gid && pw->pw_uid != ROOT_UID &&
 	    (setgid(old_gid) != -1 || setegid(old_gid) != -1))
 		fatal("%s: was able to restore old [e]gid", __func__);
 #endif
