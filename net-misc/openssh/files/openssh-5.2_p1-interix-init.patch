diff -ru -x '*.Po' -x '*.Plo' openssh-5.2p1.orig/sshd.c openssh-5.2p1/sshd.c
--- openssh-5.2p1.orig/sshd.c	2009-09-02 05:28:29 -0700
+++ openssh-5.2p1/sshd.c	2009-09-02 05:38:12 -0700
@@ -140,6 +140,10 @@
 #define REEXEC_CONFIG_PASS_FD		(STDERR_FILENO + 3)
 #define REEXEC_MIN_FREE_FD		(STDERR_FILENO + 4)
 
+#ifdef __INTERIX
+# include <interix/security.h>
+#endif
+
 extern char *__progname;
 
 /* Server configuration options. */
@@ -1497,6 +1501,31 @@
 
 	debug("sshd version %.100s", SSH_RELEASE);
 
+#ifdef __INTERIX
+	/* on interix >= 6, there is a problem is sshd is started from init:
+	 * even though the process runs as "Administrator", it seems that
+	 * the authentication token is pretty much stripped down, so it is
+	 * not possible for the process to impersonate another user.
+	 * impersonating ourself works around the problem by creating a full
+	 * authetication token for the current user (Administrator...), which
+	 * then is allowed to set uid/gid of any other user as normal. */
+	{
+		struct passwd* _admin = getpwuid(getuid());
+
+		if(!_admin) {
+			fprintf(stderr, "Cannot retrieve user information for current user!\n");
+			exit(2);
+		}
+
+		debug3("impersonating %s to upgrade authentication token\n", _admin->pw_name);
+
+		if(setuser(_admin->pw_name, NULL, SU_COMPLETE) != 0) {
+			fprintf(stderr, "Cannot obtain full authentication for current user: %s\n", strerror(errno));
+			exit(2);
+		}
+	}
+#endif
+
 	/* Store privilege separation user for later use if required. */
 	if ((privsep_pw = getpwnam(SSH_PRIVSEP_USER)) == NULL) {
 		if (use_privsep || options.kerberos_authentication)
