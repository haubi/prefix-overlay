- need to include stdbool to get "bool" type, use standard autoconf
  voodoo for that
- int is different from bool, so don't mix up declarations
- include misc.h to get bool type
- need -lintl on the final link line for platforms that don't have it in
  their libc (like almost everything non-Linux)

--- configure.in
+++ configure.in
@@ -818,6 +818,7 @@
 
 dnl ======================== Checks for header files.
 AC_HEADER_STDC
+AC_HEADER_STDBOOL
 AC_HEADER_SYS_WAIT
 AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h sys/file.h)
 AC_CHECK_HEADERS(string.h strings.h ctype.h stdlib.h stdarg.h stdint.h)
--- include/gnokii/bitmaps.h
+++ include/gnokii/bitmaps.h
@@ -36,6 +36,8 @@
 
 #include <stdio.h>
 
+#include "misc.h"
+
 #include <gnokii/error.h>
 #include <gnokii/common.h>
 
@@ -82,7 +84,7 @@
 GNOKII_API gn_error gn_bmp_null(gn_bmp *bmp, gn_phone *info);
 GNOKII_API void gn_bmp_point_set(gn_bmp *bmp, int x, int y);
 GNOKII_API void gn_bmp_point_clear(gn_bmp *bmp, int x, int y);
-GNOKII_API int  gn_bmp_point(gn_bmp *bmp, int x, int y);
+GNOKII_API bool gn_bmp_point(gn_bmp *bmp, int x, int y);
 GNOKII_API void gn_bmp_clear(gn_bmp *bmp);
 GNOKII_API void gn_bmp_resize(gn_bmp *bitmap, gn_bmp_types target, gn_phone *info);
 GNOKII_API void gn_bmp_print(gn_bmp *bitmap, FILE *f);
--- include/gnokii/encoding.h
+++ include/gnokii/encoding.h
@@ -32,7 +32,9 @@
 #ifndef _gnokii_encoding_h
 #define _gnokii_encoding_h
 
-GNOKII_API int gn_char_def_alphabet(unsigned char *string);
+#include "misc.h"
+
+GNOKII_API bool gn_char_def_alphabet(unsigned char *string);
 
 /*
  *
--- include/gnokii/networks.h
+++ include/gnokii/networks.h
@@ -32,6 +32,8 @@
 #ifndef _gnokii_networks_h
 #define _gnokii_networks_h
 
+#include "misc.h"
+
 /* This type is used to hold information about various GSM networks. */
 typedef struct {
 	char *code; /* GSM network code */
@@ -52,8 +54,8 @@
 GNOKII_API char *gn_country_name_get(char *country_code);
 GNOKII_API char *gn_country_code_get(char *country_name);
 
-GNOKII_API int gn_network_get(gn_network *network, int index);
-GNOKII_API int gn_country_get(gn_country *country, int index);
+GNOKII_API bool gn_network_get(gn_network *network, int index);
+GNOKII_API bool gn_country_get(gn_country *country, int index);
 
 GNOKII_API char *gn_network2country(char *network);
 
--- include/gnokii/rlp-common.h
+++ include/gnokii/rlp-common.h
@@ -36,6 +36,8 @@
 #ifndef _gnokii_rlp_common_h
 #define _gnokii_rlp_common_h
 
+#include "misc.h"
+
 /* Typedef for frame type - they are the same for RLP version 0, 1 and 2. */
 typedef enum {
 	RLP_FT_X, /* Unknown. */
@@ -168,9 +170,9 @@
 void rlp_f96_frame_display(gn_rlp_f96_frame *frame);
 void rlp_f96_header_decode(gn_rlp_f96_frame *frame, rlp_f96_header *header);
 void rlp_xid_display(unsigned char *frame);
-void rlp_initialise(int (*rlp_send_function)(gn_rlp_f96_frame *frame, int out_dtx), int (*rlp_passup)(rlp_user_inds ind, unsigned char *buffer, int length));
+void rlp_initialise(bool (*rlp_send_function)(gn_rlp_f96_frame *frame, bool out_dtx), int (*rlp_passup)(rlp_user_inds ind, u8 *buffer, int length));
 void rlp_link_vars_init(void);
-void rlp_user_request_set(rlp_user_requests type, int value);
+void rlp_user_request_set(rlp_user_requests type, bool value);
 void rlp_send(char *buffer, int length);
 
 #endif	/* _gnokii_rlp_common_h */
--- include/gnokii/virtmodem.h
+++ include/gnokii/virtmodem.h
@@ -33,6 +33,8 @@
 #ifndef _gnokii_virtmodem_h
 #define _gnokii_virtmodem_h
 
+#include "misc.h"
+
 struct vm_queue {
 	int n;
 	int head;
@@ -43,10 +45,10 @@
 extern struct vm_queue queue;
 
 /* Prototypes */
-GNOKII_API int gn_vm_initialise(const char *iname,
+GNOKII_API bool gn_vm_initialise(const char *iname,
 			 const char *bindir,
-			 int debug_mode,
-			 int gn_init);
+			 bool debug_mode,
+			 bool gn_init);
 GNOKII_API void gn_vm_loop(void);
 GNOKII_API void gn_vm_terminate(void);
 
--- include/gnokii.h.in
+++ include/gnokii.h.in
@@ -52,6 +52,9 @@
 typedef unsigned char uint8_t;
 #endif
 
+/* for bool -- more portability */
+#include "misc.h"
+
 #include <stdarg.h>
 	
 #ifndef GNOKII_API
@@ -313,7 +316,7 @@
 /* Place a lock for the given device in /var/lock or /var/run */
 GNOKII_API char *gn_device_lock(const char *) GNOKII_DEPRECATED;
 /* Remove a lock for the given device from /var/lock or /var/run */
-GNOKII_API int gn_device_unlock(char *) GNOKII_DEPRECATED;
+GNOKII_API bool gn_device_unlock(char *) GNOKII_DEPRECATED;
 
 GNOKII_API const char *gn_model_get(const char *product_name);
 GNOKII_API gn_phone_model *gn_phone_model_get(const char *product_name);
--- include/misc.h
+++ include/misc.h
@@ -41,16 +41,20 @@
 
 /* Some general defines. */
 
-#ifndef false
-#  define false (0)
-#endif
-
-#ifndef true
-#  define true (!false)
-#endif
-
-#ifndef bool
-#  define bool int
+#ifdef HAVE_STDBOOL_H
+# include <stdbool.h>
+#else
+# if ! HAVE__BOOL
+#  ifdef __cplusplus
+typedef bool _Bool;
+#  else
+typedef unsigned char _Bool;
+#  endif
+# endif
+# define bool _Bool
+# define false 0
+# define true 1
+# define __bool_true_false_are_defined 1
 #endif
 
 #define ARRAY_LEN(x) (sizeof((x)) / sizeof((x)[0]))
--- common/Makefile.am
+++ common/Makefile.am
@@ -54,7 +54,8 @@
 	$(top_builddir)/common/links/libLINKS.la \
 	$(top_builddir)/common/devices/libDEVICES.la \
 	$(XPM_LIBS) \
-	$(LTLIBICONV)
+	$(LTLIBICONV) \
+	$(INTLLIBS)
 
 libgnokii_la_LDFLAGS = 				\
 	-version-info $(GNOKII_LT_VERSION)	\
