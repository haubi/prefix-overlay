diff -ru libproxy-0.2.3.orig/src/lib/proxy_factory.c libproxy-0.2.3/src/lib/proxy_factory.c
--- libproxy-0.2.3.orig/src/lib/proxy_factory.c	2010-02-02 15:53:50 +0100
+++ libproxy-0.2.3/src/lib/proxy_factory.c	2010-02-02 15:55:52 +0100
@@ -121,6 +121,7 @@
 		b_data  = (uint8_t *) &((struct sockaddr_in *) ip_b)->sin_addr;
 		nm_data = nm ? (uint8_t *) &((struct sockaddr_in *) nm)->sin_addr : NULL;
 	}
+#ifdef AF_INET6
 	else if (ip_a->sa_family == AF_INET6)
 	{
 		bytes   = 128 / 8;
@@ -128,6 +129,7 @@
 		b_data  = (uint8_t *) &((struct sockaddr_in6 *) ip_b)->sin6_addr;
 		nm_data = nm ? (uint8_t *) &((struct sockaddr_in6 *) nm)->sin6_addr : NULL;
 	}
+#endif
 	else
 		return false;
 	
@@ -159,12 +161,14 @@
 	if (inet_pton(AF_INET, ip, &((struct sockaddr_in *) result)->sin_addr) > 0)
 		goto out;
 	
+#ifdef AF_INET6
 	// Try to parse IPv6
 	px_free(result);
 	result = px_malloc0(sizeof(struct sockaddr_in6));
 	result->sa_family = AF_INET6;
 	if (inet_pton(AF_INET6, ip, &((struct sockaddr_in6 *) result)->sin6_addr) > 0)
 		goto out;
+#endif
 	
 	// No address found
 	px_free(result);
@@ -228,9 +232,11 @@
 	{
 		ign_ip = _sockaddr_from_string(ignore, strrchr(ignore, ':') - ignore);
 		
+#ifdef AF_INET6
 		// Make sure this really is just a port and not just an IPv6 address
 		if (ign_ip && (ign_ip->sa_family != AF_INET6 || ignore[0] == '['))
 			goto out;
+#endif
 		
 		px_free(ign_ip);
 		ign_ip = NULL;
diff -ru libproxy-0.2.3.orig/src/lib/url.c libproxy-0.2.3/src/lib/url.c
--- libproxy-0.2.3.orig/src/lib/url.c	2010-02-02 15:53:50 +0100
+++ libproxy-0.2.3/src/lib/url.c	2010-02-02 15:56:36 +0100
@@ -100,9 +100,11 @@
 		if (self->ips[i]->sa_family == AF_INET && 
 			!connect(sock, self->ips[i], sizeof(struct sockaddr_in)))
 			break;
+#ifdef AF_INET6
 		else if (self->ips[i]->sa_family == AF_INET6 && 
 			!connect(sock, self->ips[i], sizeof(struct sockaddr_in6)))
 			break;
+#endif
 
 		close(sock);
 		sock = -1;
@@ -183,6 +185,7 @@
 	}
 	px_free(ip);
 	
+#ifdef AF_INET6
 	// Try for IPv6 next
 	ip = px_malloc0(sizeof(struct sockaddr_in6));
 	if (inet_pton(AF_INET6, px_url_get_host(self), &((struct sockaddr_in6 *) ip)->sin6_addr) > 0)
@@ -193,6 +196,7 @@
 		return (const struct sockaddr *) self->ips[0];
 	}
 	px_free(ip);
+#endif
 	
 	// The hostname was not an IP address
 	return NULL;
@@ -235,12 +239,14 @@
 				memcpy(self->ips[i], info->ai_addr, sizeof(struct sockaddr_in));
 				((struct sockaddr_in *) self->ips[i++])->sin_port = htons(self->port);
 			}
+#ifdef AF_INET6
 			else if (info->ai_addr->sa_family == AF_INET6)
 			{
 				self->ips[i] = px_malloc0(sizeof(struct sockaddr_in6));
 				memcpy(self->ips[i], info->ai_addr, sizeof(struct sockaddr_in6));
 				((struct sockaddr_in6 *) self->ips[i++])->sin6_port = htons(self->port);
 			}
+#endif
 		}
 		
 		freeaddrinfo(first);
