diff -ru gamin-0.1.9.orig/libgamin/gam_api.c gamin-0.1.9/libgamin/gam_api.c
--- gamin-0.1.9.orig/libgamin/gam_api.c	2008-03-20 13:45:56 +0100
+++ gamin-0.1.9/libgamin/gam_api.c	2008-03-20 13:45:07 +0100
@@ -128,6 +132,20 @@
     return(user_name);
 }
 
+#if defined(__INTERIX)
+static const char *
+gamin_get_user_id(void)
+{
+	static char uid[32] = { 0 };
+
+    if (uid[0] != 0)
+        return (uid);
+
+	sprintf(uid, "%d", getuid());
+    return(uid);
+}
+#endif
+
 /**
  * gamin_get_socket_path:
  *
@@ -150,17 +168,42 @@
         GAM_DEBUG(DEBUG_INFO, "Error getting GAM_CLIENT_ID\n");
         fam_client_id = "";
     }
+#if defined(__INTERIX)
+    user = gamin_get_user_id();
+#else
     user = gamin_get_user_name();
+#endif
 
     if (user == NULL) {
         gam_error(DEBUG_INFO, "Error getting user informations");
         return (NULL);
     }
+
+#if defined(__INTERIX)
+	// take extreme care that the socket isn't longer than 13 chars!
+	{
+		char tmpuid[4];
+		char tmpfamid[5];
+
+		strncpy(tmpuid, user, 4);
+		tmpuid[3] = '\0';
+
+		strncpy(tmpfamid, fam_client_id, 5);
+		tmpuid[4] = '\0';
+
+		snprintf(path, MAXPATHLEN, "/tmp/f%s%s", tmpuid, tmpfamid);
+
+		if (strlen(path) > 13) {
+			gam_error(DEBUG_INFO, "Error: socket name too long: %s", path);
+		}
+	}
+#else
 #ifdef HAVE_ABSTRACT_SOCKETS
     snprintf(path, MAXPATHLEN, "/tmp/fam-%s-%s", user, fam_client_id);
 #else
     snprintf(path, MAXPATHLEN, "/tmp/fam-%s/fam-%s", user, fam_client_id);
 #endif
+#endif
     path[MAXPATHLEN] = 0;
     ret = strdup(path);
     return (ret);

diff -ru gamin-0.1.9.orig/server/gam_channel.c gamin-0.1.9/server/gam_channel.c
--- gamin-0.1.9.orig/server/gam_channel.c	2008-03-20 12:14:05 +0100
+++ gamin-0.1.9/server/gam_channel.c	2008-03-20 13:52:07 +0100
@@ -334,6 +334,20 @@
  *									*
  ************************************************************************/
 
+#if defined(__INTERIX)
+static const char *
+gam_get_user_id(void)
+{
+	static char uid[32] = { 0 };
+
+    if (uid[0] != 0)
+        return (uid);
+
+	sprintf(uid, "%d", getuid());
+    return(uid);
+}
+#endif
+
 /**
  * gam_get_socket_path:
  * @session: the session name or NULL
@@ -361,17 +375,41 @@
     } else {
         gam_client_id = session;
     }
+#if defined(__INTERIX)
+    user = gam_get_user_id();
+#else
     user = g_get_user_name();
+#endif
 
     if (user == NULL) {
         GAM_DEBUG(DEBUG_INFO, "Error getting user informations\n");
         return (NULL);
     }
+#if defined(__INTERIX)
+	// take extreme care that the socket isn't longer than 13 chars!
+	{
+		char tmpuid[4];
+		char tmpgamid[5];
+
+		strncpy(tmpuid, user, 4);
+		tmpuid[3] = '\0';
+
+		strncpy(tmpgamid, gam_client_id, 5);
+		tmpuid[4] = '\0';
+
+    	ret = g_strconcat("/tmp/f", tmpuid, tmpgamid, NULL);
+
+		if (strlen(ret) > 13) {
+			gam_error(DEBUG_INFO, "Error: socket name too long: %s", ret);
+		}
+	}
+#else
 #ifdef HAVE_ABSTRACT_SOCKETS
     ret = g_strconcat("/tmp/fam-", user, "-", gam_client_id, NULL);
 #else
     ret = g_strconcat("/tmp/fam-", user, "/fam-", gam_client_id, NULL);
 #endif
+#endif
     return(ret);
 }
 
