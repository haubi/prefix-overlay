http://bugs.gentoo.org/show_bug.cgi?id=282830

--- lib/et/error_message.c.dist	2009-08-26 16:04:39.718538560 +0100
+++ lib/et/error_message.c	2009-08-26 16:07:34.414309280 +0100
@@ -20,13 +20,15 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
-#ifdef HAVE_SYS_PRCTL_H
-#include <sys/prctl.h>
-#else
-#define PR_GET_DUMPABLE 3
-#endif
-#if (!defined(HAVE_PRCTL) && defined(linux))
-#include <sys/syscall.h>
+#ifndef __sgi
+# ifdef HAVE_SYS_PRCTL_H
+#  include <sys/prctl.h>
+# else
+#  define PR_GET_DUMPABLE 3
+# endif
+# if (!defined(HAVE_PRCTL) && defined(linux))
+#  include <sys/syscall.h>
+# endif
 #endif
 #ifdef HAVE_SEMAPHORE_H
 #include <semaphore.h>
@@ -177,14 +179,16 @@ static char *safe_getenv(const char *arg
 {
 	if ((getuid() != geteuid()) || (getgid() != getegid()))
 		return NULL;
-#if HAVE_PRCTL
+#ifndef __sgi
+# if HAVE_PRCTL
 	if (prctl(PR_GET_DUMPABLE, 0, 0, 0, 0) == 0)
 		return NULL;
-#else
-#if (defined(linux) && defined(SYS_prctl))
+# else
+#  if (defined(linux) && defined(SYS_prctl))
 	if (syscall(SYS_prctl, PR_GET_DUMPABLE, 0, 0, 0, 0) == 0)
 		return NULL;
-#endif
+#  endif
+# endif
 #endif
 
 #ifdef HAVE___SECURE_GETENV
--- lib/ss/pager.c.dist	2009-08-26 16:51:03.894518480 +0100
+++ lib/ss/pager.c	2009-08-26 18:12:23.342848920 +0100
@@ -28,13 +28,15 @@ extern int errno;
 #include <sys/types.h>
 #include <sys/file.h>
 #include <signal.h>
-#ifdef HAVE_SYS_PRCTL_H
-#include <sys/prctl.h>
-#else
-#define PR_GET_DUMPABLE 3
-#endif
-#if (!defined(HAVE_PRCTL) && defined(linux))
-#include <sys/syscall.h>
+#ifndef __sgi
+# ifdef HAVE_SYS_PRCTL_H
+#  include <sys/prctl.h>
+# else
+#  define PR_GET_DUMPABLE 3
+# endif
+# if (!defined(HAVE_PRCTL) && defined(linux))
+#  include <sys/syscall.h>
+# endif
 #endif
 
 static char MORE[] = "more";
@@ -45,14 +47,16 @@ char *ss_safe_getenv(const char *arg)
 {
 	if ((getuid() != geteuid()) || (getgid() != getegid()))
 		return NULL;
-#if HAVE_PRCTL
+#ifndef __sgi
+# if HAVE_PRCTL
 	if (prctl(PR_GET_DUMPABLE, 0, 0, 0, 0) == 0)
 		return NULL;
-#else
-#if (defined(linux) && defined(SYS_prctl))
+# else
+#  if (defined(linux) && defined(SYS_prctl))
 	if (syscall(SYS_prctl, PR_GET_DUMPABLE, 0, 0, 0, 0) == 0)
 		return NULL;
-#endif
+#  endif
+# endif
 #endif
 
 #ifdef HAVE___SECURE_GETENV
--- lib/blkid/cache.c.dist	2009-08-26 18:10:02.609552920 +0100
+++ lib/blkid/cache.c	2009-08-26 18:19:55.334635640 +0100
@@ -18,13 +18,15 @@
 #endif
 #include <stdlib.h>
 #include <string.h>
-#ifdef HAVE_SYS_PRCTL_H
-#include <sys/prctl.h>
-#else
-#define PR_GET_DUMPABLE 3
-#endif
-#if (!defined(HAVE_PRCTL) && defined(linux))
-#include <sys/syscall.h>
+#ifndef __sgi
+# ifdef HAVE_SYS_PRCTL_H
+#  include <sys/prctl.h>
+# else
+#  define PR_GET_DUMPABLE 3
+# endif
+# if (!defined(HAVE_PRCTL) && defined(linux))
+#  include <sys/syscall.h>
+# endif
 #endif
 #ifdef HAVE_SYS_STAT_H
 #include <sys/stat.h>
@@ -38,14 +40,16 @@ static char *safe_getenv(const char *arg
 {
 	if ((getuid() != geteuid()) || (getgid() != getegid()))
 		return NULL;
-#if HAVE_PRCTL
+#ifndef __sgi
+# if HAVE_PRCTL
 	if (prctl(PR_GET_DUMPABLE, 0, 0, 0, 0) == 0)
 		return NULL;
-#else
-#if (defined(linux) && defined(SYS_prctl))
+# else
+#  if (defined(linux) && defined(SYS_prctl))
 	if (syscall(SYS_prctl, PR_GET_DUMPABLE, 0, 0, 0, 0) == 0)
 		return NULL;
-#endif
+#  endif
+# endif
 #endif
 
 #ifdef HAVE___SECURE_GETENV
--- lib/blkid/probe.h.dist	2009-08-26 18:46:16.430087080 +0100
+++ lib/blkid/probe.h	2009-08-26 19:12:17.642303600 +0100
@@ -462,6 +462,9 @@ struct ntfs_super_block {
 	__u16	checksum;
 };
 
+#ifdef __sgi
+#pragma pack (16)
+#endif
 struct master_file_table_record {
 	__u32	magic;
 	__u16	usa_ofs;
@@ -473,8 +476,17 @@ struct master_file_table_record {
 	__u16	flags;
 	__u32	bytes_in_use;
 	__u32	bytes_allocated;
-} __attribute__((__packed__));
+}
+#ifndef __sgi
+__attribute__((__packed__));
+#else
+;
+#pragma pack (0)
+#endif
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct file_attribute {
 	__u32	type;
 	__u32	len;
@@ -485,7 +497,13 @@ struct file_attribute {
 	__u16	instance;
 	__u32	value_len;
 	__u16	value_offset;
-} __attribute__((__packed__));
+}
+#ifndef __sgi
+__attribute__((__packed__));
+#else
+;
+#pragma pack (0)
+#endif
 
 #define MFT_RECORD_VOLUME			3
 #define MFT_RECORD_ATTR_VOLUME_NAME		0x60
@@ -494,6 +512,9 @@ struct file_attribute {
 #define MFT_RECORD_ATTR_END			0xffffffffu
 
 /* HFS / HFS+ */
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct hfs_finder_info {
         __u32        boot_folder;
         __u32        start_app;
@@ -502,8 +523,17 @@ struct hfs_finder_info {
         __u32        reserved;
         __u32        osx_folder;
         __u8         id[8];
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct hfs_mdb {
         __u8         signature[2];
         __u32        cr_date;
@@ -532,12 +562,21 @@ struct hfs_mdb {
         __u8         embed_sig[2];
         __u16        embed_startblock;
         __u16        embed_blockcount;
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
 
 #define HFS_NODE_LEAF			0xff
 #define HFSPLUS_POR_CNID		1
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct hfsplus_bnode_descriptor {
 	__u32		next;
 	__u32		prev;
@@ -545,8 +584,17 @@ struct hfsplus_bnode_descriptor {
 	__u8		height;
 	__u16		num_recs;
 	__u16		reserved;
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
+#ifdef __sgi
+#pragma pack (16)
+#endif
 struct hfsplus_bheader_record {
 	__u16		depth;
 	__u32		root;
@@ -554,28 +602,64 @@ struct hfsplus_bheader_record {
 	__u32		leaf_head;
 	__u32		leaf_tail;
 	__u16		node_size;
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct hfsplus_catalog_key {
 	__u16	key_len;
 	__u32	parent_id;
 	__u16	unicode_len;
 	__u8		unicode[255 * 2];
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
+#ifdef __sgi
+#pragma pack (32)
+#endif
 struct hfsplus_extent {
 	__u32		start_block;
 	__u32		block_count;
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
 #define HFSPLUS_EXTENT_COUNT		8
+#ifdef __sgi
+#pragma pack (32)
+#endif
 struct hfsplus_fork {
 	__u64		total_size;
 	__u32		clump_size;
 	__u32		total_blocks;
 	struct hfsplus_extent extents[HFSPLUS_EXTENT_COUNT];
-} __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct hfsplus_vol_header {
 	__u8		signature[2];
 	__u16		version;
@@ -603,13 +687,22 @@ struct hfsplus_vol_header {
 	struct hfsplus_fork cat_file;
 	struct hfsplus_fork attr_file;
 	struct hfsplus_fork start_file;
-}  __attribute__((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
 
 /* this is lvm's label_header & pv_header combined. */
 
 #define LVM2_ID_LEN 32
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct lvm2_pv_label_header {
 	/* label_header */
 	__u8	id[8];		/* LABELONE */
@@ -619,7 +712,13 @@ struct lvm2_pv_label_header {
 	__u8	type[8];	/* LVM2 001 */
 	/* pv_header */
 	__u8	pv_uuid[LVM2_ID_LEN];
-} __attribute__ ((packed));
+}
+#ifndef __sgi
+__attribute__((packed));
+#else
+;
+#pragma pack (0)
+#endif
 
 
 /*
@@ -632,6 +731,9 @@ struct lvm2_pv_label_header {
 #define BTRFS_FSID_SIZE 16
 #define BTRFS_CSUM_SIZE 32
 
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct btrfs_dev_item {
 	/* the internal btrfs device id */
 	__u64 devid;
@@ -677,12 +779,21 @@ struct btrfs_dev_item {
 
 	/* uuid of FS who owns this device */
 	__u8 fsid[BTRFS_UUID_SIZE];
-} __attribute__ ((__packed__));
+}
+#ifndef __sgi
+ __attribute__ ((__packed__));
+#else
+;
+#pragma pack (0)
+#endif
 
 /*
  * the super block basically lists the main trees of the FS
  * it currently lacks any block count etc etc
  */
+#ifdef __sgi
+#pragma pack (8)
+#endif
 struct btrfs_super_block {
 	__u8 csum[BTRFS_CSUM_SIZE];
 	/* the first 3 fields must match struct btrfs_header */
@@ -723,7 +834,13 @@ struct btrfs_super_block {
 	/* future expansion */
 	__u64 reserved[32];
 	__u8 sys_chunk_array[BTRFS_SYSTEM_CHUNK_ARRAY_SIZE];
-} __attribute__ ((__packed__));
+}
+#ifndef __sgi
+ __attribute__ ((__packed__));
+#else
+;
+#pragma pack (0)
+#endif
 
 /*
  * Byte swap functions
