diff -ru -x '*.Po' -x '*.Plo' gst-plugins-base-0.10.20.orig/gst/tcp/gstmultifdsink.c gst-plugins-base-0.10.20/gst/tcp/gstmultifdsink.c
--- gst-plugins-base-0.10.20.orig/gst/tcp/gstmultifdsink.c	2008-08-25 14:32:15 +0200
+++ gst-plugins-base-0.10.20/gst/tcp/gstmultifdsink.c	2008-08-25 15:00:10 +0200
@@ -714,7 +714,11 @@
 {
   gint tos;
   gint ret;
+#ifndef __INTERIX
   struct sockaddr_storage ssaddr;
+#else
+  struct sockaddr ssaddr;
+#endif
   socklen_t slen = sizeof (ssaddr);
   gint af;
 
@@ -729,8 +733,13 @@
     return ret;
   }
 
+#ifndef __INTERIX
   af = ssaddr.ss_family;
+#else
+  af = ssaddr.sa_family;
+#endif
 
+#ifdef AT_INET6
   /* if this is an IPv4-mapped address then do IPv4 QoS */
   if (af == AF_INET6) {
     struct sockaddr_in6 *saddr6 = (struct sockaddr_in6 *) &ssaddr;
@@ -741,6 +750,7 @@
       af = AF_INET;
     }
   }
+#endif
 
   /* extract and shift 6 bits of the DSCP */
   tos = (sink->qos_dscp & 0x3f) << 2;
@@ -749,6 +759,7 @@
     case AF_INET:
       ret = setsockopt (client->fd.fd, IPPROTO_IP, IP_TOS, &tos, sizeof (tos));
       break;
+#ifdef AF_INET6
     case AF_INET6:
 #ifdef IPV6_TCLASS
       ret =
@@ -756,6 +767,7 @@
           sizeof (tos));
       break;
 #endif
+#endif
     default:
       ret = 0;
       GST_ERROR_OBJECT (sink, "unsupported AF");
diff -ru -x '*.Po' -x '*.Plo' gst-plugins-base-0.10.20.orig/gst-libs/gst/rtsp/gstrtspconnection.c gst-plugins-base-0.10.20/gst-libs/gst/rtsp/gstrtspconnection.c
--- gst-plugins-base-0.10.20.orig/gst-libs/gst/rtsp/gstrtspconnection.c	2008-08-25 14:32:16 +0200
+++ gst-plugins-base-0.10.20/gst-libs/gst/rtsp/gstrtspconnection.c	2008-08-25 14:52:02 +0200
@@ -1558,7 +1558,11 @@
 GstRTSPResult
 gst_rtsp_connection_set_qos_dscp (GstRTSPConnection * conn, guint qos_dscp)
 {
+#ifndef __INTERIX
   struct sockaddr_storage sa_s;
+#else
+  struct sockaddr sa_s;
+#endif
   socklen_t sa_sl = sizeof (sa_s);
   gint af;
   gint tos;
@@ -1569,8 +1573,13 @@
   if (getsockname (conn->fd.fd, (struct sockaddr *) &sa_s, &sa_sl) < 0)
     goto no_getsockname;
 
+#ifndef __INTERIX
   af = sa_s.ss_family;
+#else
+  af = sa_s.sa_family;
+#endif
 
+#ifdef AF_INET6
   /* if this is an IPv4-mapped address then do IPv4 QoS */
   if (af == AF_INET6) {
     struct sockaddr_in6 *saddr6 = (struct sockaddr_in6 *) &sa_s;
@@ -1578,6 +1587,7 @@
     if (IN6_IS_ADDR_V4MAPPED (&saddr6->sin6_addr))
       af = AF_INET;
   }
+#endif
 
   /* extract and shift 6 bits of the DSCP */
   tos = (qos_dscp & 0x3f) << 2;
@@ -1587,6 +1597,7 @@
       if (SETSOCKOPT (conn->fd.fd, IPPROTO_IP, IP_TOS, &tos, sizeof (tos)) < 0)
         goto no_setsockopt;
       break;
+#ifdef AF_INET6
     case AF_INET6:
 #ifdef IPV6_TCLASS
       if (SETSOCKOPT (conn->fd.fd, IPPROTO_IPV6, IPV6_TCLASS, &tos,
@@ -1594,6 +1605,7 @@
         goto no_setsockopt;
       break;
 #endif
+#endif
     default:
       goto wrong_family;
   }
