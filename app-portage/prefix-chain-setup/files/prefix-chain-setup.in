#!/bin/env bash

PARENT_EPREFIX="@GENTOO_PORTAGE_EPREFIX@"
CHILD_EPREFIX=
CHILD_PROFILE=
DO_MINIMAL=no

#
# get ourselfs the functions.sh script for ebegin/eend/etc.
#
. "${PARENT_EPREFIX}"/sbin/functions.sh

for arg in "$@"; do
	case "${arg}" in
	--eprefix=*)	CHILD_EPREFIX="${arg#--eprefix=}"	;;
	--profile=*)	CHILD_PROFILE="${arg#--profile=}"	;;
	--minimal)		DO_MINIMAL=yes						;;

	--help)
		einfo "$0 usage:"
		einfo "  --eprefix=[PATH]       Path to new EPREFIX to create chained to the prefix"
		einfo "                         where this script is installed (${PARENT_EPREFIX})"
		einfo "  --proflie=[PATH]       The absolute path to the profile to use. This path"
		einfo "                         must point to a directory within ${PARENT_EPREFIX}"
		einfo "  --minimal              just create the very basics, this omits portage and"
		einfo "                         gcc-config, which are required to use the normal"
		einfo "                         native toolchain of a parent prefix. If you plan to"
		einfo "                         use a cross toolchain from a parent prefix, you can"
		einfo "                         use this, to have a cleaner chained prefix. (one"
		einfo "                         example for this would be building a x86-winnt prefix"
		einfo "                         from a x86-interix prefix)"
		exit 0
		;;
	esac
done

#
# sanity check of given values
#

test -n "${CHILD_EPREFIX}" || { eerror "no eprefix argument given"; exit 1; }
test -d "${CHILD_EPREFIX}" && { eerror "${CHILD_EPREFIX} already exists"; exit 1; }
test -n "${CHILD_PROFILE}" || { eerror "no profile argument given"; exit 1; }
test -d "${CHILD_PROFILE}" || { eerror "${CHILD_PROFILE} does not exist"; exit 1; }
test "${CHILD_PROFILE#${PARENT_EPREFIX}}" != "${CHILD_PROFILE}" || { eerror "${CHILD_PROFILE} is not withing ${CHILD_EPREFIX}"; exit 1; }

einfo "creating chained prefix ${CHILD_EPREFIX}"

#
# functions needed below.
#
eend_exit() {
	eend $1
	[[ $1 != 0 ]] && exit 1
}

#
# create the directories required to bootstrap the least.
#
ebegin "creating directory structure"
(
	set -e
	mkdir -p "${CHILD_EPREFIX}"/etc
	mkdir -p "${CHILD_EPREFIX}"/var/log
)
eend_exit $?

#
# create a make.conf and set PORTDIR and PORTAGE_TMPDIR
#
ebegin "creating make.conf"
(
	set -e
	echo "#"
	echo "# The following values where taken from the parent prefix's"
	echo "# environment. Feel free to adopt them as you like."
	echo "#"
	echo "CFLAGS=\"$(portageq envvar CFLAGS)\""
	echo "CXXFLAGS=\"$(portageq envvar CXXFLAGS)\""
	echo "MAKEOPTS=\"$(portageq envvar MAKEOPTS)\""
	echo "USE=\"prefix-chaining\""
	echo
	echo "#"
	echo "# Below comes the chained-prefix setup. Only change things"
	echo "# if you know exactly what you are doing!"
	echo "# by default, only DEPEND is inherited from the parent in"
	echo "# the chain. if you want more, make it a comma seperated"
	echo "# list - like this: DEPEND,RDEPEND,PDEPEN - which would the"
	echo "# all that is possible"
	echo "#"
	echo "PORTDIR=\"$(portageq envvar PORTDIR)\""
	echo "SYNC=\"$(portageq envvar SYNC)\""
	case "${CHILD_PROFILE}" in
	*winnt*)	echo "PORTAGE_TMPDIR=/var/tmp" ;;
	*)			echo "PORTAGE_TMPDIR=\"${CHILD_EPREFIX}/var/tmp\"" ;;
	esac
	echo "READONLY_EPREFIX=\"${PARENT_EPREFIX}:DEPEND\""
) > "${CHILD_EPREFIX}"/etc/make.conf
eend_exit $?

#
# create the make.profile symlinks.
#
ebegin "creating make.profile"
(
	ln -s "${CHILD_PROFILE}" "${CHILD_EPREFIX}/etc/make.profile"
)
eend_exit $?

#
# adjust permissions of generated files.
#
ebegin "adjusting permissions"
(
	chmod 644 "${CHILD_EPREFIX}"/etc/make.conf
)
eend_exit $?

#
# now merge some basics.
#
ebegin "installing required basic packages"
(
	# this -pv is there to avoid the global update output, which is
	# there on the first emerge run.
	EPREFIX="${CHILD_EPREFIX}" emerge -p1qO baselayout > /dev/null 2>&1

	if [[ ${DO_MINIMAL} == yes ]]; then
		EPREFIX="${CHILD_EPREFIX}" emerge -1qO baselayout prefix-chain-utils libtool
	else
		EPREFIX="${CHILD_EPREFIX}" emerge -1qO baselayout portage prefix-chain-utils gcc-config libtool

		# select the chain wrapper profile from gcc-config
		env -i "${CHILD_EPREFIX}"/usr/bin/gcc-config 1
	fi
)
eend_exit $?

#
# wow, all ok :)
#
ewarn
ewarn "all done. don't forget to tune ${CHILD_EPREFIX}/etc/make.conf."
ewarn "to enter the new prefix, run \"${CHILD_EPREFIX}/startprefix\"."
ewarn
