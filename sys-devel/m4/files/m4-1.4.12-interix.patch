diff -ru -x '*.Po' -x '*.Plo' m4-1.4.12.orig/lib/fatal-signal.c m4-1.4.12/lib/fatal-signal.c
--- m4-1.4.12.orig/lib/fatal-signal.c	2008-10-29 14:57:21 +0100
+++ m4-1.4.12/lib/fatal-signal.c	2008-10-29 14:58:19 +0100
@@ -183,10 +183,12 @@
   struct sigaction action;
 
   action.sa_handler = &fatal_signal_handler;
+#ifdef SA_NODEFER
   /* If we get a fatal signal while executing fatal_signal_handler, enter
      fatal_signal_handler recursively, since it is reentrant.  Hence no
      SA_RESETHAND.  */
   action.sa_flags = SA_NODEFER;
+#endif
   sigemptyset (&action.sa_mask);
   for (i = 0; i < num_fatal_signals; i++)
     if (fatal_signals[i] >= 0)
diff -ru -x '*.Po' -x '*.Plo' m4-1.4.12.orig/src/m4.c m4-1.4.12/src/m4.c
--- m4-1.4.12.orig/src/m4.c	2008-10-29 14:57:22 +0100
+++ m4-1.4.12/src/m4.c	2008-10-29 15:00:14 +0100
@@ -396,7 +396,10 @@
   sigemptyset (&act.sa_mask);
   /* One-shot - if we fault while handling a fault, we want to revert
      to default signal behavior.  */
-  act.sa_flags = SA_NODEFER | SA_RESETHAND;
+  act.sa_flags = SA_RESETHAND;
+#ifdef SA_NODEFER
+  act.sa_flags |= SA_NODEFER;
+#endif
   act.sa_handler = fault_handler;
   sigaction (SIGABRT, &act, NULL);
   sigaction (SIGILL, &act, NULL);
