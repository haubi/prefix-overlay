diff -ru -x '*.Po' m4-1.4.11.orig/lib/isnan.c m4-1.4.11/lib/isnan.c
--- m4-1.4.11.orig/lib/isnan.c	2008-10-09 07:57:41 +0200
+++ m4-1.4.11/lib/isnan.c	2008-10-09 09:08:15 +0200
@@ -105,16 +105,18 @@
 # else
   /* Be careful to not do any floating-point operation on x, such as x == x,
      because x may be a signaling NaN.  */
-#  if defined __SUNPRO_C || defined __DECC || (defined __sgi && !defined __GNUC__)
+#  if defined __SUNPRO_C || defined __DECC || (defined __sgi && !defined __GNUC__) || defined(_MSC_VER)
   /* The Sun C 5.0 compilers and the Compaq (ex-DEC) 6.4 compilers don't
      recognize the initializers as constant expressions.  The latter compiler
      also fails when constant-folding 0.0 / 0.0 even when constant-folding is
      not required.  The SGI MIPSpro C compiler complains about "floating-point
      operation result is out of range".  */
+  /* additionally with microsoft compiler, the division by zero must be made
+   * using the zero variable, since otherwise the compiler detects the division. */
   static DOUBLE zero = L_(0.0);
   memory_double nan;
-  DOUBLE plus_inf = L_(1.0) / L_(0.0);
-  DOUBLE minus_inf = -L_(1.0) / L_(0.0);
+  DOUBLE plus_inf = L_(1.0) / zero;
+  DOUBLE minus_inf = -L_(1.0) / zero;
   nan.value = zero / zero;
 #  else
   static memory_double nan = { L_(0.0) / L_(0.0) };
diff -ru -x '*.Po' m4-1.4.11.orig/lib/math.in.h m4-1.4.11/lib/math.in.h
--- m4-1.4.11.orig/lib/math.in.h	2008-10-09 07:57:42 +0200
+++ m4-1.4.11/lib/math.in.h	2008-10-09 09:00:05 +0200
@@ -37,7 +37,7 @@
    IEEE NaN, so we define this unconditionally.  */
 #ifndef NAN
   /* The Compaq (ex-DEC) C 6.4 compiler chokes on the expression 0.0 / 0.0.  */
-# ifdef __DECC
+# if defined(__DECC) || defined(_MSC_VER)
 static float
 _NaN ()
 {
diff -ru -x '*.Po' m4-1.4.11.orig/lib/regex_internal.h m4-1.4.11/lib/regex_internal.h
--- m4-1.4.11.orig/lib/regex_internal.h	2008-10-09 07:57:43 +0200
+++ m4-1.4.11/lib/regex_internal.h	2008-10-09 08:56:57 +0200
@@ -85,8 +85,10 @@
 #endif
 
 #if (defined MB_CUR_MAX && HAVE_LOCALE_H && HAVE_WCTYPE_H && HAVE_ISWCTYPE && HAVE_WCRTOMB && HAVE_MBRTOWC && HAVE_WCSCOLL) || _LIBC
+#ifndef _WIN32
 # define RE_ENABLE_I18N
 #endif
+#endif
 
 #if __GNUC__ >= 3
 # define BE(expr, val) __builtin_expect (expr, val)
diff -ru -x '*.Po' m4-1.4.11.orig/m4/include_next.m4 m4-1.4.11/m4/include_next.m4
--- m4-1.4.11.orig/m4/include_next.m4	2008-10-09 08:01:23 +0200
+++ m4-1.4.11/m4/include_next.m4	2008-10-09 08:56:57 +0200
@@ -90,14 +90,19 @@
 	    dnl eval is necessary to expand ac_cpp.
 	    dnl Ultrix and Pyramid sh refuse to redirect output of eval,
 	    dnl so use subshell.
+		dnl use cat > /dev/null to read the rest of the pipe, and avoid
+		dnl SIGPIPE on the compiler, since this may cause bad things to
+		dnl happen (e.g. subprocesses staying around locking up conftest.c).
+		dnl also check for \ _and_ /, to be able to execute the check on
+		dnl windows.
 	    AS_VAR_SET([gl_next_header],
 	      ['"'`(eval "$ac_cpp conftest.$ac_ext") 2>&AS_MESSAGE_LOG_FD |
-	       sed -n '\#/]m4_quote(m4_defn([gl_HEADER_NAME]))[#{
-		 s#.*"\(.*/]m4_quote(m4_defn([gl_HEADER_NAME]))[\)".*#\1#
-		 s#^/[^/]#//&#
+	       { sed -n '\#[/\\]]m4_quote(m4_defn([gl_HEADER_NAME]))[#{
+		 s#.*"\(.*[/\\]]m4_quote(m4_defn([gl_HEADER_NAME]))[\)".*#\1#
+		 s#^[/\\][^/]#//&#
 		 p
 		 q
-	       }'`'"'])
+	       }'; cat > /dev/null; }`'"'])
 	  else
 	    AS_VAR_SET([gl_next_header], ['<'gl_HEADER_NAME'>'])
 	  fi
