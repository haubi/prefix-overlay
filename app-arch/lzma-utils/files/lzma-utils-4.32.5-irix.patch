* see http://bugs.gentoo.org/show_bug.cgi?id=209473

--- src/sdk/Common/Types.h
+++ src/sdk/Common/Types.h
@@ -7,9 +7,11 @@
 #include <config.h>
 #endif
 
+#ifndef __sgi
 #ifdef HAVE_STDINT_H
 # include <stdint.h>
 #endif
+#endif
 
 #ifdef HAVE_INTTYPES_H
 # include <inttypes.h>
@@ -24,8 +26,17 @@
 #endif
 
 typedef uint8_t Byte;
+#ifdef __sgi
+/* These types are actually identical to below,
+ * but IRIX doesn't allow _fast types if not
+ * in C99 mode - which is the case for C++
+ */
+typedef int16_t Int16;
+typedef uint16_t UInt16;
+#else
 typedef int_fast16_t Int16;
 typedef uint_fast16_t UInt16;
+#endif
 typedef int32_t Int32;
 typedef uint32_t UInt32;
 typedef int64_t Int64;
--- src/sdk/7zip/Compress/RangeCoder/RangeCoderBitTree.h.dist	2008-04-02 19:50:58.630621600 +0100
+++ src/sdk/7zip/Compress/RangeCoder/RangeCoderBitTree.h	2008-04-02 19:52:09.582825600 +0100
@@ -108,7 +108,7 @@
 };
 
 template <int numMoveBits>
-void ReverseBitTreeEncode(CBitEncoder<numMoveBits> *Models, 
+inline void ReverseBitTreeEncode(CBitEncoder<numMoveBits> *Models, 
     CEncoder *rangeEncoder, int NumBitLevels, UInt32 symbol)
 {
   UInt32 modelIndex = 1;
@@ -122,7 +122,7 @@
 }
 
 template <int numMoveBits>
-UInt32 ReverseBitTreeGetPrice(CBitEncoder<numMoveBits> *Models, 
+inline UInt32 ReverseBitTreeGetPrice(CBitEncoder<numMoveBits> *Models, 
     UInt32 NumBitLevels, UInt32 symbol)
 {
   UInt32 price = 0;
@@ -138,7 +138,7 @@
 }
 
 template <int numMoveBits>
-UInt32 ReverseBitTreeDecode(CBitDecoder<numMoveBits> *Models, 
+inline UInt32 ReverseBitTreeDecode(CBitDecoder<numMoveBits> *Models, 
     CDecoder *rangeDecoder, int NumBitLevels)
 {
   UInt32 modelIndex = 1;
--- src/liblzmadec/io.c.dist	2008-04-02 19:59:10.091156000 +0100
+++ src/liblzmadec/io.c	2008-04-02 20:00:32.149606400 +0100
@@ -36,7 +36,16 @@
 #endif
 
 #ifndef SIZE_MAX
-#define SIZE_MAX (~(size_t)0)
+# ifdef __sgi
+#  if (_MIPS_SZLONG == 32)
+#   define SIZE_MAX                UINT32_MAX
+#  endif
+#  if (_MIPS_SZLONG == 64)
+#   define SIZE_MAX                UINT64_MAX
+#  endif
+# else
+#  define SIZE_MAX (~(size_t)0)
+# endif
 #endif
 
 #define LZMADEC_NO_STDIO
