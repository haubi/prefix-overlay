<alanh@fairlite.co.uk>: unify doesn't work on MiNT

--- ccache.h
+++ ccache.h
@@ -9,7 +9,9 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#ifndef __MINT__
 #include <sys/mman.h>
+#endif
 #include <sys/file.h>
 #include <fcntl.h>
 #include <time.h>
--- ccache.c
+++ ccache.c
@@ -63,7 +63,9 @@
 char *stats_file = NULL;
 
 /* can we safely use the unification hashing backend? */
+#ifndef __MINT__
 static int enable_unify;
+#endif
 
 /* a list of supported file extensions, and the equivalent
    extension for code that has been through the pre-processor
@@ -272,9 +274,11 @@
 
 	/* when we are doing the unifying tricks we need to include
            the input file name in the hash to get the warnings right */
+#ifndef __MINT__
 	if (enable_unify) {
 		hash_string(input_file);
 	}
+#endif
 
 	/* we have to hash the extension, as a .i file isn't treated the same
 	   by the compiler as a .ii file */
@@ -399,14 +403,18 @@
 	   Note! I have now disabled the unification code by default
 	   as it gives the wrong line numbers for warnings. Pity.
 	*/
+#ifndef __MINT__
 	if (!enable_unify) {
+#endif
 		hash_file(path_stdout);
+#ifndef __MINT__
 	} else {
 		if (unify_hash(path_stdout) != 0) {
 			stats_update(STATS_ERROR);
 			failed();
 		}
 	}
+#endif
 	hash_file(path_stderr);
 
 	i_tmpfile = path_stdout;
@@ -697,9 +705,11 @@
 		*/
 		if (strncmp(argv[i], "-g", 2) == 0) {
 			args_add(stripped_args, argv[i]);
+#ifndef __MINT__
 			if (strcmp(argv[i], "-g0") != 0) {
 				enable_unify = 0;
 			}
+#endif
 			continue;
 		}
 
@@ -853,10 +863,11 @@
 		cc_log("ccache is disabled\n");
 		failed();
 	}
-
+#ifndef __MINT__
 	if (getenv("CCACHE_UNIFY")) {
 		enable_unify = 1;
 	}
+#endif
 
 	/* process argument list, returning a new set of arguments for pre-processing */
 	process_args(orig_args->argc, orig_args->argv);
--- unify.c
+++ unify.c
@@ -30,6 +30,7 @@
   inline assembly systems).  
 */
 
+#ifndef __MINT__
 #include "ccache.h"
 
 static char *s_tokens[] = {
@@ -266,4 +267,4 @@
 
 	return 0;
 }
-
+#endif
