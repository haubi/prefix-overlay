diff -ru rocksndiamonds-3.2.6.0.orig/src/editor.c rocksndiamonds-3.2.6.0/src/editor.c
--- rocksndiamonds-3.2.6.0.orig/src/editor.c	2009-01-19 13:26:00 +0100
+++ rocksndiamonds-3.2.6.0/src/editor.c	2009-01-19 14:31:18 +0100
@@ -23,6 +23,9 @@
 #include "init.h"
 #include "tape.h"
 
+#if defined(_WIN32) && defined(TARGET_X11)
+# include <alloca.h>
+#endif
 
 #define INFOTEXT_UNKNOWN_ELEMENT	"unknown"
 
@@ -4602,7 +4605,7 @@
 static int num_editor_hl_dynamic = SIZEOF_ARRAY_INT(editor_hl_dynamic);
 static int num_editor_el_dynamic = 0;
 
-static int editor_hl_empty[] = { };
+static int editor_hl_empty[1];
 static int editor_el_empty[ED_NUM_ELEMENTLIST_BUTTONS];
 
 static int *editor_hl_empty_ptr = editor_hl_empty;
@@ -5476,7 +5479,11 @@
       int gd_x, gd_x1, gd_x2, gd_y;
       int x_size, y_size;
       unsigned long event_mask;
+	  #ifndef _WIN32
       char infotext[max_infotext_len + 1];
+	  #else
+      char* infotext=alloca(max_infotext_len + 1);
+	  #endif
 
       event_mask = GD_EVENT_PRESSED | GD_EVENT_REPEATED;
 
@@ -8586,7 +8593,11 @@
   int font_height = getFontHeight(font_nr);
   int max_text_width = SXSIZE - x - ED_ELEMENT_SETTINGS_XPOS(0);
   int max_chars_per_line = max_text_width / font_width;
+  #ifndef _WIN32
   char buffer[max_chars_per_line + 1];
+  #else
+  char* buffer=alloca(max_chars_per_line + 1);
+  #endif
 
   if (strlen(element_name) <= max_chars_per_line)
     DrawTextS(x, y, font_nr, element_name);
diff -ru rocksndiamonds-3.2.6.0.orig/src/files.c rocksndiamonds-3.2.6.0/src/files.c
--- rocksndiamonds-3.2.6.0.orig/src/files.c	2009-01-19 13:26:00 +0100
+++ rocksndiamonds-3.2.6.0/src/files.c	2009-01-19 14:36:29 +0100
@@ -23,6 +23,9 @@
 #include "tools.h"
 #include "tape.h"
 
+#if defined(_WIN32) && defined(TARGET_X11)
+# include <alloca.h>
+#endif
 
 #define CHUNK_ID_LEN		4	/* IFF style chunk id length  */
 #define CHUNK_SIZE_UNDEFINED	0	/* undefined chunk size == 0  */
@@ -5833,7 +5836,11 @@
   char *filename = level_file_info->filename;
   FILE *file;
   int num_magic_bytes = 8;
+  #ifndef _WIN32
   char magic_bytes[num_magic_bytes + 1];
+  #else
+  char* magic_bytes=alloca(num_magic_bytes + 1);
+  #endif
   int num_levels_to_skip = level_file_info->nr - leveldir_current->first_level;
 
   if (!(file = fopen(filename, MODE_READ)))
diff -ru rocksndiamonds-3.2.6.0.orig/src/game.c rocksndiamonds-3.2.6.0/src/game.c
--- rocksndiamonds-3.2.6.0.orig/src/game.c	2009-01-19 13:26:01 +0100
+++ rocksndiamonds-3.2.6.0/src/game.c	2009-01-19 14:22:48 +0100
@@ -10368,16 +10368,29 @@
   int action_element = change->action_element;
   int i;
 
+  int level_time_value;
+  int action_arg_element_raw;
+  int action_arg_element;
+  int action_arg_direction;
+  int action_arg_number_min;
+  int action_arg_number_max;
+  int action_arg_number_reset;
+  int action_arg_number;
+  int action_arg_number_old;
+  int action_arg_number_new;
+  int trigger_player_bits;
+  int action_arg_player_bits;
+
   if (!change->has_action)
     return;
 
   /* ---------- determine action paramater values -------------------------- */
 
-  int level_time_value =
+  level_time_value =
     (level.time > 0 ? TimeLeft :
      TimePlayed);
 
-  int action_arg_element_raw =
+  action_arg_element_raw =
     (action_arg == CA_ARG_PLAYER_TRIGGER  ? change->actual_trigger_player :
      action_arg == CA_ARG_ELEMENT_TRIGGER ? change->actual_trigger_element :
      action_arg == CA_ARG_ELEMENT_TARGET  ? change->target_element :
@@ -10386,14 +10399,14 @@
      action_arg == CA_ARG_INVENTORY_RM_TARGET  ? change->target_element :
      action_arg == CA_ARG_INVENTORY_RM_ACTION  ? change->action_element :
      EL_EMPTY);
-  int action_arg_element = GetElementFromGroupElement(action_arg_element_raw);
+  action_arg_element = GetElementFromGroupElement(action_arg_element_raw);
 
 #if 0
   if (action_arg_element_raw == EL_GROUP_START)
     printf("::: %d,%d: %d ('%s')\n", x, y, element, EL_NAME(element));
 #endif
 
-  int action_arg_direction =
+  action_arg_direction =
     (action_arg >= CA_ARG_DIRECTION_LEFT &&
      action_arg <= CA_ARG_DIRECTION_DOWN ? action_arg - CA_ARG_DIRECTION :
      action_arg == CA_ARG_DIRECTION_TRIGGER ?
@@ -10402,11 +10415,11 @@
      MV_DIR_OPPOSITE(change->actual_trigger_side) :
      MV_NONE);
 
-  int action_arg_number_min =
+  action_arg_number_min =
     (action_type == CA_SET_PLAYER_SPEED ? STEPSIZE_NOT_MOVING :
      CA_ARG_MIN);
 
-  int action_arg_number_max =
+  action_arg_number_max =
     (action_type == CA_SET_PLAYER_SPEED ? STEPSIZE_EVEN_FASTER :
      action_type == CA_SET_LEVEL_GEMS ? 999 :
      action_type == CA_SET_LEVEL_TIME ? 9999 :
@@ -10415,7 +10428,7 @@
      action_type == CA_SET_CE_SCORE ? 9999 :
      CA_ARG_MAX);
 
-  int action_arg_number_reset =
+  action_arg_number_reset =
     (action_type == CA_SET_PLAYER_SPEED ? level.initial_player_stepsize[0] :
      action_type == CA_SET_LEVEL_GEMS ? level.gems_needed :
      action_type == CA_SET_LEVEL_TIME ? level.time :
@@ -10428,7 +10441,7 @@
      action_type == CA_SET_CE_SCORE ? 0 :
      0);
 
-  int action_arg_number =
+  action_arg_number =
     (action_arg <= CA_ARG_MAX ? action_arg :
      action_arg >= CA_ARG_SPEED_NOT_MOVING &&
      action_arg <= CA_ARG_SPEED_EVEN_FASTER ? (action_arg - CA_ARG_SPEED) :
@@ -10457,7 +10470,7 @@
      action_arg == CA_ARG_ELEMENT_NR_ACTION  ? change->action_element :
      -1);
 
-  int action_arg_number_old =
+  action_arg_number_old =
     (action_type == CA_SET_LEVEL_GEMS ? local_player->gems_still_needed :
      action_type == CA_SET_LEVEL_TIME ? TimeLeft :
      action_type == CA_SET_LEVEL_SCORE ? local_player->score :
@@ -10465,24 +10478,24 @@
      action_type == CA_SET_CE_SCORE ? ei->collect_score :
      0);
 
-  int action_arg_number_new =
+  action_arg_number_new =
     getModifiedActionNumber(action_arg_number_old,
 			    action_mode, action_arg_number,
 			    action_arg_number_min, action_arg_number_max);
 
 #if 1
-  int trigger_player_bits =
+  trigger_player_bits =
     (change->actual_trigger_player_bits != CH_PLAYER_NONE ?
      change->actual_trigger_player_bits : change->trigger_player);
 #else
-  int trigger_player_bits =
+  trigger_player_bits =
     (change->actual_trigger_player >= EL_PLAYER_1 &&
      change->actual_trigger_player <= EL_PLAYER_4 ?
      (1 << (change->actual_trigger_player - EL_PLAYER_1)) :
      PLAYER_BITS_ANY);
 #endif
 
-  int action_arg_player_bits =
+  action_arg_player_bits =
     (action_arg >= CA_ARG_PLAYER_1 &&
      action_arg <= CA_ARG_PLAYER_4 ? action_arg - CA_ARG_PLAYER :
      action_arg == CA_ARG_PLAYER_TRIGGER ? trigger_player_bits :
diff -ru rocksndiamonds-3.2.6.0.orig/src/game_em/init.c rocksndiamonds-3.2.6.0/src/game_em/init.c
--- rocksndiamonds-3.2.6.0.orig/src/game_em/init.c	2009-01-19 13:26:01 +0100
+++ rocksndiamonds-3.2.6.0/src/game_em/init.c	2009-01-19 13:48:50 +0100
@@ -8,7 +8,7 @@
 
 #include <signal.h>
 
-#if !defined(TARGET_SDL)
+#if !defined(TARGET_SDL) && !defined(_WIN32)
 #include <sys/wait.h>
 #endif
 
diff -ru rocksndiamonds-3.2.6.0.orig/src/init.c rocksndiamonds-3.2.6.0/src/init.c
--- rocksndiamonds-3.2.6.0.orig/src/init.c	2009-01-19 13:26:01 +0100
+++ rocksndiamonds-3.2.6.0/src/init.c	2009-01-19 14:15:05 +0100
@@ -5449,6 +5449,7 @@
   Bitmap *bitmap_font_initial = NULL;
   int font_height;
   int i, j;
+  int parameter[NUM_GFX_ARGS];
 
   /* determine settings for initial font (for displaying startup messages) */
   for (i = 0; image_config[i].token != NULL; i++)
@@ -5525,7 +5526,6 @@
 #if 1
 #if 1
   /* initialize busy animation with default values */
-  int parameter[NUM_GFX_ARGS];
   for (i = 0; i < NUM_GFX_ARGS; i++)
     parameter[i] = get_graphic_parameter_value(image_config_suffix[i].value,
                                                image_config_suffix[i].token,
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/hash.c rocksndiamonds-3.2.6.0/src/libgame/hash.c
--- rocksndiamonds-3.2.6.0.orig/src/libgame/hash.c	2009-01-19 13:26:01 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/hash.c	2009-01-19 13:43:25 +0100
@@ -38,6 +38,7 @@
 #include <stdio.h>
 #include <string.h>
 
+#include "system.h"
 #include "hash.h"
 
 
@@ -380,6 +381,8 @@
   return itr;
 }
 
+#ifndef _WIN32
+
 /*****************************************************************************/
 /* key - return the key of the (key,value) pair at the current position */
 
@@ -398,6 +401,8 @@
   return i->e->v;
 }
 
+#endif
+
 /*****************************************************************************/
 /* advance - advance the iterator to the next element
  *           returns zero if advanced to end of table */
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/image.c rocksndiamonds-3.2.6.0/src/libgame/image.c
--- rocksndiamonds-3.2.6.0.orig/src/libgame/image.c	2009-01-19 13:26:01 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/image.c	2009-01-19 14:35:17 +0100
@@ -55,7 +55,7 @@
   free(image);
 }
 
-#if defined(PLATFORM_UNIX)
+#if defined(PLATFORM_UNIX) || defined(TARGET_X11)
 
 /* extra colors to try allocating in private color maps to minimize flashing */
 #define NOFLASH_COLORS 256
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/misc.c rocksndiamonds-3.2.6.0/src/libgame/misc.c
--- rocksndiamonds-3.2.6.0.orig/src/libgame/misc.c	2009-01-19 13:26:01 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/misc.c	2009-01-19 14:40:57 +0100
@@ -32,6 +32,9 @@
 #include "text.h"
 #include "image.h"
 
+#if defined(_WIN32) && defined(TARGET_X11)
+# define inline
+#endif
 
 /* ========================================================================= */
 /* some generic helper functions                                             */
@@ -201,7 +204,7 @@
 
 #else /* !TARGET_SDL */
 
-#if defined(PLATFORM_UNIX)
+#if defined(PLATFORM_UNIX) || (defined(_WIN32) && defined(TARGET_X11))
 static unsigned long mainCounter(int mode)
 {
   static struct timeval base_time = { 0, 0 };
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/platform.h rocksndiamonds-3.2.6.0/src/libgame/platform.h
--- rocksndiamonds-3.2.6.0.orig/src/libgame/platform.h	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/platform.h	2009-01-19 13:37:54 +0100
@@ -166,7 +166,7 @@
 #endif
 #endif
 
-#if defined(PLATFORM_UNIX) && defined(TARGET_X11)
+#if (defined(PLATFORM_UNIX) || (defined(_WIN32) && defined(__PARITY__))) && defined(TARGET_X11)
 #define TARGET_X11_NATIVE
 #endif
 
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/setup.c rocksndiamonds-3.2.6.0/src/libgame/setup.c
--- rocksndiamonds-3.2.6.0.orig/src/libgame/setup.c	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/setup.c	2009-01-19 13:48:18 +0100
@@ -19,17 +19,18 @@
 
 #include "platform.h"
 
-#if !defined(PLATFORM_WIN32)
-#include <pwd.h>
-#include <sys/param.h>
-#endif
-
 #include "setup.h"
 #include "joystick.h"
 #include "text.h"
 #include "misc.h"
 #include "hash.h"
 
+#if !defined(PLATFORM_WIN32)
+#include <pwd.h>
+#include <sys/param.h>
+#else
+#include <shfolder.h>
+#endif
 
 #define NUM_LEVELCLASS_DESC	8
 
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/sound.c rocksndiamonds-3.2.6.0/src/libgame/sound.c
--- rocksndiamonds-3.2.6.0.orig/src/libgame/sound.c	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/sound.c	2009-01-19 13:41:44 +0100
@@ -1557,7 +1557,7 @@
 
   snd_info->data_len = ((SAMPLE *)snd_info->data_ptr)->len;
 
-#else /* AUDIO_UNIX_NATIVE */
+#elif defined(AUDIO_UNIX_NATIVE) /* AUDIO_UNIX_NATIVE */
 
   clear_mem(&header, sizeof(struct SoundHeader_WAV));	/* to make gcc happy */
 
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/text.c rocksndiamonds-3.2.6.0/src/libgame/text.c
--- rocksndiamonds-3.2.6.0.orig/src/libgame/text.c	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/text.c	2009-01-19 13:39:32 +0100
@@ -17,6 +17,10 @@
 #include "text.h"
 #include "misc.h"
 
+#ifdef _WIN32
+# include <alloca.h>
+#endif
+
 
 /* ========================================================================= */
 /* font functions                                                            */
@@ -758,7 +762,11 @@
   int font_width = getFontWidth(font_nr);
   int font_height = getFontHeight(font_nr);
 #endif
+  #ifdef _WIN32
+  char* buffer = alloca(line_length + 1);
+  #else
   char buffer[line_length + 1];
+  #endif
   int buffer_len;
   int current_line = 0;
 
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/types.h rocksndiamonds-3.2.6.0/src/libgame/types.h
--- rocksndiamonds-3.2.6.0.orig/src/libgame/types.h	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/types.h	2009-01-19 13:36:26 +0100
@@ -22,7 +22,7 @@
 
 typedef int boolean;
 
-#if !defined(PLATFORM_WIN32)
+#if defined(TARGET_X11)
 typedef unsigned char byte;
 #endif
 
diff -ru rocksndiamonds-3.2.6.0.orig/src/libgame/windows.h rocksndiamonds-3.2.6.0/src/libgame/windows.h
--- rocksndiamonds-3.2.6.0.orig/src/libgame/windows.h	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/libgame/windows.h	2009-01-19 13:35:29 +0100
@@ -14,8 +14,13 @@
 #ifndef WINDOWS_H
 #define WINDOWS_H
 
-#include <shlobj.h>
+#ifdef TARGET_X11
+# include <X11/Xwindows.h>
+#else
+# include <shlobj.h>
+#endif
 
+#define inline __declspec(inline)
 
 /* some symbols are already defined on Windows */
 #define CreateBitmap CreateBitmap_internal
diff -ru rocksndiamonds-3.2.6.0.orig/src/main.h rocksndiamonds-3.2.6.0/src/main.h
--- rocksndiamonds-3.2.6.0.orig/src/main.h	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/main.h	2009-01-19 14:13:27 +0100
@@ -15,7 +15,9 @@
 #define MAIN_H
 
 #include <time.h>
+#if !(defined(_WIN32) && defined(TARGET_X11))
 #include <sys/time.h>
+#endif
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <errno.h>
diff -ru rocksndiamonds-3.2.6.0.orig/src/screens.c rocksndiamonds-3.2.6.0/src/screens.c
--- rocksndiamonds-3.2.6.0.orig/src/screens.c	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/screens.c	2009-01-19 14:19:44 +0100
@@ -25,6 +25,10 @@
 #include "init.h"
 #include "config.h"
 
+#if defined(_WIN32) && defined(TARGET_X11)
+# include <alloca.h>
+#endif
+
 /* screens on the info screen */
 #define INFO_MODE_MAIN			0
 #define INFO_MODE_TITLE			1
@@ -996,11 +1000,13 @@
 
 static boolean insideMenuPosRect(struct MenuPosInfo *rect, int x, int y)
 {
+  int rect_x, rect_y;
+
   if (rect == NULL)
     return FALSE;
 
-  int rect_x = ALIGNED_TEXT_XPOS(rect);
-  int rect_y = ALIGNED_TEXT_YPOS(rect);
+  rect_x = ALIGNED_TEXT_XPOS(rect);
+  rect_y = ALIGNED_TEXT_YPOS(rect);
 
   return (x >= rect_x && x < rect_x + rect->width &&
 	  y >= rect_y && y < rect_y + rect->height);
@@ -1008,11 +1014,13 @@
 
 static boolean insideTextPosRect(struct TextPosInfo *rect, int x, int y)
 {
+  int rect_x, rect_y;
+
   if (rect == NULL)
     return FALSE;
 
-  int rect_x = ALIGNED_TEXT_XPOS(rect);
-  int rect_y = ALIGNED_TEXT_YPOS(rect);
+  rect_x = ALIGNED_TEXT_XPOS(rect);
+  rect_y = ALIGNED_TEXT_YPOS(rect);
 
   return (x >= rect_x && x < rect_x + rect->width &&
 	  y >= rect_y && y < rect_y + rect->height);
@@ -3306,7 +3314,11 @@
     int startx_scrollbar = mSX + SC_SCROLLBAR_XPOS + menu.scrollbar_xoffset;
     int text_size = startx_scrollbar - startx_text;
     int max_buffer_len = text_size / getFontWidth(font_nr);
+	#ifndef _WIN32
     char buffer[max_buffer_len + 1];
+	#else
+    char* buffer=(max_buffer_len + 1);
+	#endif
 
     node_first = getTreeInfoFirstGroupEntry(ti);
     node = getTreeInfoFromPos(node_first, entry_pos);
diff -ru rocksndiamonds-3.2.6.0.orig/src/tools.c rocksndiamonds-3.2.6.0/src/tools.c
--- rocksndiamonds-3.2.6.0.orig/src/tools.c	2009-01-19 13:26:02 +0100
+++ rocksndiamonds-3.2.6.0/src/tools.c	2009-01-19 14:33:34 +0100
@@ -20,7 +20,10 @@
 #include "network.h"
 #include "tape.h"
 #include "screens.h"
-
+#if defined(_WIN32) && defined(TARGET_X11)
+# include <alloca.h>
+# define inline
+#endif
 
 /* select level set with EMC X11 graphics before activating EM GFX debugging */
 #define DEBUG_EM_GFX	0
@@ -2862,7 +2865,11 @@
   /* write text for request */
   for (ty = 0; ty < MAX_REQUEST_LINES; ty++)
   {
+	#ifndef _WIN32
     char text_line[max_request_line_len + 1];
+	#else
+    char* text_line=alloca(max_request_line_len + 1);
+	#endif
     int tx, tl, tc = 0;
 
     if (!*text)
@@ -6199,6 +6206,7 @@
 			int tile, int frame_em, int x, int y)
 {
   int action = object_mapping[tile].action;
+  int frame;
 #if 1
   int direction = object_mapping[tile].direction;
   int effective_element = get_effective_element_EM(tile, frame_em);
@@ -6316,7 +6324,7 @@
 
   SetRandomAnimationValue(x, y);
 
-  int frame = getAnimationFrame(g->anim_frames,
+  frame = getAnimationFrame(g->anim_frames,
 				g->anim_delay,
 				g->anim_mode,
 				g->anim_start_frame,
@@ -6355,6 +6363,7 @@
   struct GraphicInfo *g_crumbled = &graphic_info[crumbled];
 #endif
   int sync_frame;
+  int frame;
 
   /* special case: graphic uses "2nd movement tile" and has defined
      7 frames for movement animation (or less) => use default graphic
@@ -6725,7 +6734,7 @@
   }
 #endif
 
-  int frame = getAnimationFrame(g->anim_frames,
+  frame = getAnimationFrame(g->anim_frames,
 				g->anim_delay,
 				g->anim_mode,
 				g->anim_start_frame,
@@ -6904,6 +6913,7 @@
 		 el_act_dir2img(element, action, direction));
   struct GraphicInfo *g = &graphic_info[graphic];
   int sync_frame;
+  int frame;
 
   InitPlayerGfxAnimation(&stored_player[player_nr], action, direction);
 
@@ -6911,7 +6921,7 @@
 
   sync_frame = stored_player[player_nr].Frame;
 
-  int frame = getAnimationFrame(g->anim_frames,
+  frame = getAnimationFrame(g->anim_frames,
 				g->anim_delay,
 				g->anim_mode,
 				g->anim_start_frame,
