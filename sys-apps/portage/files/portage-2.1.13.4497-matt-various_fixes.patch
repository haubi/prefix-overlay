Index: prefix-portage-2.1.13.4497/bin/emaint
===================================================================
--- prefix-portage-2.1.13.4497.orig/bin/emaint
+++ prefix-portage-2.1.13.4497/bin/emaint
@@ -16,7 +16,7 @@ class WorldHandler(object):
 		self.invalid = []
 		self.not_installed = []
 		self.okay = []
-		self.world_file = os.path.join("/", portage_const.WORLD_FILE)
+		self.world_file = os.path.join(portage_const.EPREFIX+"/", portage_const.WORLD_FILE)
 		self.found = os.access(self.world_file, os.R_OK)
 
 		for atom in open(self.world_file).read().split():
Index: prefix-portage-2.1.13.4497/bin/etc-update
===================================================================
--- prefix-portage-2.1.13.4497.orig/bin/etc-update
+++ prefix-portage-2.1.13.4497/bin/etc-update
@@ -42,7 +42,11 @@ function scan() {
 		exit 1
 	fi
 
+	prefix_len=${#EPREFIX}
 	for path in ${CONFIG_PROTECT} ; do
+		if [ "${path::${prefix_len}}" != "${EPREFIX}" ]; then
+			path=${EPREFIX}${path}
+		fi
 		[ ! -d ${path} ] && continue
 
 		ofile=""
Index: prefix-portage-2.1.13.4497/bin/misc-functions.sh
===================================================================
--- prefix-portage-2.1.13.4497.orig/bin/misc-functions.sh
+++ prefix-portage-2.1.13.4497/bin/misc-functions.sh
@@ -363,12 +363,14 @@ dyn_package() {
 	install_mask "${PORTAGE_BUILDDIR}/image" ${PKG_INSTALL_MASK}
 	local pkg_dest="${PKGDIR}/All/${PF}.tbz2"
 	local pkg_tmp="${PKGDIR}/All/${PF}.tbz2.$$"
+	addwrite "${PKGDIR}"
+
 	# Sandbox is disabled in case the user wants to use a symlink
 	# for $PKGDIR and/or $PKGDIR/All.
 	export SANDBOX_ON="0"
 	tar cpvf - ./ | bzip2 -f > "${pkg_tmp}" || die "Failed to create tarball"
 	cd ..
-	python -c "import xpak; t=xpak.tbz2('${pkg_tmp}'); t.recompose('${PORTAGE_BUILDDIR}/build-info')"
+	PYTHONPATH=${EPREFIX}/usr/lib/portage/pym python -c "import xpak; t=xpak.tbz2('${pkg_tmp}'); t.recompose('${PORTAGE_BUILDDIR}/build-info')"
 	if [ $? -ne 0 ]; then
 		rm -f "${pkg_tmp}"
 		die "Failed to append metadata to the tbz2 file"
Index: prefix-portage-2.1.13.4497/pym/dispatch_conf.py
===================================================================
--- prefix-portage-2.1.13.4497.orig/pym/dispatch_conf.py
+++ prefix-portage-2.1.13.4497/pym/dispatch_conf.py
@@ -12,6 +12,7 @@ import os, sys, commands, shutil
 
 sys.path = ["/usr/lib/portage/pym"]+sys.path
 import portage
+from portage_const import EPREFIX
 
 RCS_BRANCH = '1.1.1'
 RCS_LOCK = 'rcs -ko -M -l'
@@ -23,12 +24,12 @@ DIFF3_MERGE = 'diff3 -mE %s %s %s >%s'
 
 def read_config(mandatory_opts):
     try:
-        opts = portage.getconfig('/etc/dispatch-conf.conf')
+        opts = portage.getconfig(EPREFIX+'/etc/dispatch-conf.conf')
     except:
         opts = None
 
     if not opts:
-        print >> sys.stderr, 'dispatch-conf: Error reading /etc/dispatch-conf.conf; fatal'
+        print >> sys.stderr, 'dispatch-conf: Error reading '+EPREFIX+'/etc/dispatch-conf.conf; fatal'
         sys.exit(1)
 
     for key in mandatory_opts:
Index: prefix-portage-2.1.13.4497/pym/portage.py
===================================================================
--- prefix-portage-2.1.13.4497.orig/pym/portage.py
+++ prefix-portage-2.1.13.4497/pym/portage.py
@@ -1071,7 +1071,9 @@ class config:
 
 			try:
 				# XXX: Should depend on root?
-				self.mygcfg=getconfig("/"+MAKE_CONF_FILE,allow_sourcing=True)
+				## Yes, Should depend on root!! (npac)
+				global root
+				self.mygcfg=getconfig(root+MAKE_CONF_FILE,allow_sourcing=True)
 				if self.mygcfg == None:
 					self.mygcfg = {}
 			except SystemExit, e:
@@ -2610,7 +2612,7 @@ def prepare_build_dirs(myroot, mysetting
 			mysettings["LOG_PF"] != mysettings["PF"]:
 				mysettings["LOG_PF"] = mysettings["PF"]
 				mysettings["LOG_COUNTER"] = \
-					str(db[myroot]["vartree"].dbapi.get_counter_tick_core("/"))
+					str(db[myroot]["vartree"].dbapi.get_counter_tick_core(root))
 
 		if not logging_enabled:
 			writemsg("!!! Permission issues with PORT_LOGDIR='%s'\n" % mysettings["PORT_LOGDIR"])
@@ -4830,7 +4832,8 @@ class portdbapi(dbapi):
 					writemsg("Uncaught handled exception: %(exception)s\n" % {"exception":str(e)})
 					raise
 
-			myret=doebuild(myebuild,"depend","/",self.mysettings,dbkey=mydbkey,tree="porttree")
+			# Use root, instead of "/" (npac)
+			myret=doebuild(myebuild,"depend",root,self.mysettings,dbkey=mydbkey,tree="porttree")
 			if myret:
 				portage_locks.unlockfile(mylock)
 				self.lock_held = 0
