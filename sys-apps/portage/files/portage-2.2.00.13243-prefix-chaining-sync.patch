diff -ru portage.orig/pym/_emerge/__init__.py portage/pym/_emerge/__init__.py
--- portage.orig/pym/_emerge/__init__.py	2009-04-02 10:24:31 +0200
+++ portage/pym/_emerge/__init__.py	2009-04-02 11:25:12 +0200
@@ -12310,7 +12310,7 @@
 									raise
 								del e
 					processed_count += 1
-					myso=commands.getstatusoutput("LANG=C LANGUAGE=C "+EPREFIX+"/usr/bin/install-info --dir-file="+inforoot+"/dir "+inforoot+"/"+x)[1]
+					myso=commands.getstatusoutput("LANG=C LANGUAGE=C " + EPREFIX + "/usr/bin/install-info --dir-file="+inforoot+"/dir "+inforoot+"/"+x)[1]
 					existsstr="already exists, for file `"
 					if myso!="":
 						if re.search(existsstr,myso):
@@ -12751,7 +12751,8 @@
 				"control (contains %s).\n!!! Aborting rsync sync.\n") % \
 				(myportdir, vcs_dir), level=logging.ERROR, noiselevel=-1)
 			return 1
-		if not os.path.exists(EPREFIX+"/usr/bin/rsync"):
+		rsync_bin = portage.readonly_pathmatch_any(settings, "/usr/bin/rsync")
+		if not os.path.exists(rsync_bin):
 			print "!!! /usr/bin/rsync does not exist, so rsync support is disabled."
 			print "!!! Type \"emerge net-misc/rsync\" to enable rsync support."
 			sys.exit(1)
@@ -12923,7 +12924,7 @@
 			if mytimestamp != 0 and "--quiet" not in myopts:
 				print ">>> Checking server timestamp ..."
 
-			rsynccommand = [EPREFIX+"/usr/bin/rsync"] + rsync_opts + extra_rsync_opts
+			rsynccommand = [rsync_bin] + rsync_opts + extra_rsync_opts
 
 			if "--debug" in myopts:
 				print rsynccommand
@@ -13074,7 +13075,8 @@
 				out.eerror(line)
 			sys.exit(exitcode)
 	elif syncuri[:6]=="cvs://":
-		if not os.path.exists(EPREFIX+"/usr/bin/cvs"):
+		cvs_bin = portage.readonly_pathmatch_any(settings, "/usr/bin/cvs")
+		if not os.path.exists(cvs_bin):
 			print "!!! cvs does not exist, so CVS support is disabled."
 			print "!!! Type \"emerge dev-util/cvs\" to enable CVS support."
 			sys.exit(1)
@@ -13094,7 +13096,7 @@
 						"!!! existing '%s' directory; exiting.\n" % myportdir)
 					sys.exit(1)
 				del e
-			if portage.spawn("cd "+cvsdir+"; cvs -z0 -d "+cvsroot+" co -P gentoo-x86",settings,free=1):
+			if portage.spawn("cd "+cvsdir+"; "+cvs_bin+" -z0 -d "+cvsroot+" co -P gentoo-x86",settings,free=1):
 				print "!!! cvs checkout error; exiting."
 				sys.exit(1)
 			os.rename(os.path.join(cvsdir, "gentoo-x86"), myportdir)
@@ -13102,13 +13104,14 @@
 			#cvs update
 			print ">>> Starting cvs update with "+syncuri+"..."
 			retval = portage.process.spawn_bash(
-				"cd %s; cvs -z0 -q update -dP" % \
-				(portage._shell_quote(myportdir),), **spawn_kwargs)
+				"cd %s; %s -z0 -q update -dP" % \
+				(portage._shell_quote(myportdir),cvs_bin), **spawn_kwargs)
 			if retval != os.EX_OK:
 				sys.exit(retval)
 		dosyncuri = syncuri
 	elif syncuri[:11]=="svn+http://" or syncuri[:6]=="svn://" or syncuri[:12]=="svn+https://":
-		if not os.path.exists(EPREFIX+"/usr/bin/svn"):
+		svn_bin = portage.readonly_pathmatch_any(settings, "/usr/bin/svn")
+		if not os.path.exists(svn_bin):
 			print "!!! svn does not exist, so SVN support is disabled."
 			print "!!! Type \"emerge dev-util/subversion\" to enable SVN support."
 			sys.exit(1)
@@ -13136,7 +13139,7 @@
 		else:
 			#svn update
 			print ">>> Starting svn update..."
-			retval = portage.spawn("cd '%s'; svn update" % myportdir, \
+			retval = portage.spawn("cd '%s'; %s update" % (myportdir,svn_bin), \
 				settings, free=1)
 			if retval != os.EX_OK:
 				sys.exit(retval)
diff -ru portage.orig/pym/portage/__init__.py portage/pym/portage/__init__.py
--- portage.orig/pym/portage/__init__.py	2009-04-02 10:24:31 +0200
+++ portage/pym/portage/__init__.py	2009-04-02 11:21:46 +0200
@@ -6969,6 +6969,27 @@
 
 	return reduced
 
+# this may be better placed somewhere else, but i put it here for now, to
+# keep all functions in the patch on one big heap.
+def readonly_pathmatch_any(settings, path):
+	path = path.lstrip('/')
+	# first try locally, and match that if it exists.
+	if os.path.exists(os.path.join(EPREFIX,path)):
+		return os.path.join(EPREFIX,path)
+
+	# after that try all readonly roots where DEPEND is allowed. this makes
+	# sure that executing binaries is possible from there.
+	for ro_root, ro_deps in settings.readonly_roots.items():
+		if "DEPEND" in ro_deps:
+			print " --- checking %s --- " % (os.path.join(ro_root,path))
+			if os.path.exists(os.path.join(ro_root,path)):
+				return os.path.join(ro_root,path)
+			break
+	
+	# as a fallback make the string the same as it was originally.
+	# even though this path doesn't exist.
+	return os.path.join(EPREFIX,path)
+
 def dep_zapdeps(unreduced, reduced, myroot, use_binaries=0, trees=None):
 	"""Takes an unreduced and reduced deplist and removes satisfied dependencies.
 	Returned deplist contains steps that must be taken to satisfy dependencies."""
