diff -ru file-5.00.orig/src/apprentice.c file-5.00/src/apprentice.c
--- file-5.00.orig/src/apprentice.c	2009-03-10 09:43:32 +0100
+++ file-5.00/src/apprentice.c	2009-03-10 09:45:05 +0100
@@ -50,6 +50,172 @@
 #endif
 #include <dirent.h>
 
+#ifndef HAVE_STRTOULL
+
+/* THIS IS TAKEN FROM BASH, SINCE INTERIX HAS NO OWN IMPLEMENTATION BY DEFAULT! */
+
+/* Convert NPTR to an `unsigned long int' or `long int' in base BASE.
+   If BASE is 0 the base is determined by the presence of a leading
+   zero, indicating octal or a leading "0x" or "0X", indicating hexadecimal.
+   If BASE is < 2 or > 36, it is no longer reset to 10; EINVAL is returned.
+   If ENDPTR is not NULL, a pointer to the character after the last
+   one converted is stored in *ENDPTR.  */
+
+unsigned long long int
+strtoull (nptr, endptr, base)
+     const char *nptr;
+     char **endptr;
+     int base;
+{
+  int negative;
+  register unsigned long long int cutoff;
+  register unsigned int cutlim;
+  register unsigned long long int i;
+  register const char *s;
+  register unsigned char c;
+  const char *save, *end;
+  int overflow;
+
+  if (base < 0 || base == 1 || base > 36)
+    {
+      errno = EINVAL;
+      return 0;
+    }
+
+  save = s = nptr;
+
+  /* Skip white space.  */
+  while (isspace ((unsigned char)*s))
+    ++s;
+  if (*s == '\0')
+    goto noconv;
+
+  /* Check for a sign.  */
+  if (*s == '-' || *s == '+')
+    {
+      negative = (*s == '-');
+      ++s;
+    }
+  else
+    negative = 0;
+
+  /* Recognize number prefix and if BASE is zero, figure it out ourselves.  */
+  if (*s == '0')
+    {
+      if ((base == 0 || base == 16) && toupper ((unsigned char) s[1]) == 'X')
+	{
+	  s += 2;
+	  base = 16;
+	}
+      else if (base == 0)
+	base = 8;
+    }
+  else if (base == 0)
+    base = 10;
+
+  /* Save the pointer so we can check later if anything happened.  */
+  save = s;
+
+  end = NULL;
+
+  cutoff = ULLONG_MAX / (unsigned long long int) base;
+  cutlim = ULLONG_MAX % (unsigned long long int) base;
+
+  overflow = 0;
+  i = 0;
+  c = *s;
+  if (sizeof (long int) != sizeof (long long int))
+    {
+      unsigned long int j = 0;
+      unsigned long int jmax = ULONG_MAX / base;
+
+      for (;c != '\0'; c = *++s)
+	{
+	  if (s == end)
+	    break;
+	  if (((c) >= '0' && (c) <= '9'))
+	    c -= '0';
+	  else if (isalpha (c))
+	    c = toupper (c) - 'A' + 10;
+	  else
+	    break;
+
+	  if ((int) c >= base)
+	    break;
+	  /* Note that we never can have an overflow.  */
+	  else if (j >= jmax)
+	    {
+	      /* We have an overflow.  Now use the long representation.  */
+	      i = (unsigned long long int) j;
+	      goto use_long;
+	    }
+	  else
+	    j = j * (unsigned long int) base + c;
+	}
+
+      i = (unsigned long long int) j;
+    }
+  else
+    for (;c != '\0'; c = *++s)
+      {
+	if (s == end)
+	  break;
+	if (((c) >= '0' && (c) <= '9'))
+	  c -= '0';
+	else if (isalpha (c))
+	  c = toupper (c) - 'A' + 10;
+	else
+	  break;
+	if ((int) c >= base)
+	  break;
+	/* Check for overflow.  */
+	if (i > cutoff || (i == cutoff && c > cutlim))
+	  overflow = 1;
+	else
+	  {
+	  use_long:
+	    i *= (unsigned long long int) base;
+	    i += c;
+	  }
+      }
+
+  /* Check if anything actually happened.  */
+  if (s == save)
+    goto noconv;
+
+  /* Store in ENDPTR the address of one character
+     past the last character we converted.  */
+  if (endptr != NULL)
+    *endptr = (char *) s;
+
+  if (overflow)
+    {
+      errno = ERANGE;
+      return ULLONG_MAX;
+    }
+
+  /* Return the result of the appropriate sign.  */
+  return negative ? -i : i;
+
+noconv:
+  /* We must handle a special case here: the base is 0 or 16 and the
+     first two characters are '0' and 'x', but the rest are no
+     hexadecimal digits.  This is no error case.  We return 0 and
+     ENDPTR points to the `x`.  */
+  if (endptr != NULL)
+    {
+      if (save - nptr >= 2 && toupper ((unsigned char) save[-1]) == 'X' && save[-2] == '0')
+	*endptr = (char *) &save[-1];
+      else
+	/*  There was no number to convert.  */
+	*endptr = (char *) nptr;
+    }
+
+  return 0L;
+}
+
+#endif
+
 #define	EATAB {while (isascii((unsigned char) *l) && \
 		      isspace((unsigned char) *l))  ++l;}
 #define LOWCASE(l) (isupper((unsigned char) (l)) ? \
