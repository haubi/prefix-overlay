This is a rediff of the relevant patches at:
http://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg35327.html

--- libdrm-2.4.5/libdrm/xf86drm.c
+++ libdrm-2.4.5/libdrm/xf86drm.c
@@ -940,7 +940,11 @@
 {
     drm_map_t map;
 
+#ifdef __sun
+    map.handle = handle;
+#else
     map.handle = (void *)handle;
+#endif
 
     if(drmIoctl(fd, DRM_IOCTL_RM_MAP, &map))
 	return -errno;
@@ -1178,6 +1182,9 @@
     bufs.count = 0;
     bufs.list  = NULL;
     bufs.virtual = NULL;
+#ifdef __sun
+    bufs.fd = fd;
+#endif
     if (drmIoctl(fd, DRM_IOCTL_MAP_BUFS, &bufs))
 	return NULL;
 
--- libdrm-2.4.5/shared-core/drm.h
+++ libdrm-2.4.5/shared-core/drm.h
@@ -79,7 +79,7 @@
 #define DRM_IOC_WRITE		_IOC_WRITE
 #define DRM_IOC_READWRITE	_IOC_READ|_IOC_WRITE
 #define DRM_IOC(dir, group, nr, size) _IOC(dir, group, nr, size)
-#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
+#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__DragonFly__) || defined(__sun)
 #include <sys/ioccom.h>
 #define DRM_IOCTL_NR(n)		((n) & 0xff)
 #define DRM_IOC_VOID		IOC_VOID
@@ -89,6 +89,13 @@
 #define DRM_IOC(dir, group, nr, size) _IOC(dir, group, nr, size)
 #endif
 
+#if defined(__sun) && !defined(_IOC)
+#define _IOC(dir, group, nr, size)                             \
+    (dir == DRM_IOC_READWRITE ? _IOWRN(group, nr, size) :      \
+      (dir == DRM_IOC_WRITE ? _IOWN(group, nr, size) :         \
+       /* dir == DRM_IOC_READ */  _IORN(group, nr, size) ))
+#endif
+
 #ifdef __OpenBSD__
 #define DRM_MAJOR       81
 #endif
@@ -112,7 +119,11 @@
 typedef unsigned int drm_handle_t;
 #else
 #include <sys/types.h>
+# if defined(__sun)
+typedef unsigned long long drm_handle_t;/**< To mapped regions */
+# else
 typedef unsigned long drm_handle_t;	/**< To mapped regions */
+# endif
 #endif
 typedef unsigned int drm_context_t;	/**< GLXContext handle */
 typedef unsigned int drm_drawable_t;
@@ -266,12 +277,22 @@
  * \sa drmAddMap().
  */
 struct drm_map {
+#ifdef __sun
+       unsigned long long offset;
+                               /**< Requested physical address (0 for SAREA)*/
+       unsigned long long handle;
+                               /**< User-space: "Handle" to pass to mmap() */
+                               /**< Kernel-space: kernel-virtual address */
+#else
 	unsigned long offset;	 /**< Requested physical address (0 for SAREA)*/
+#endif
 	unsigned long size;	 /**< Requested physical size (bytes) */
 	enum drm_map_type type;	 /**< Type of memory to map */
 	enum drm_map_flags flags;	 /**< Flags */
+#ifndef __sun
 	void *handle;		 /**< User-space: "Handle" to pass to mmap() */
 				 /**< Kernel-space: kernel-virtual address */
+#endif
 	int mtrr;		 /**< MTRR slot used */
 	/*   Private data */
 };
@@ -435,6 +456,9 @@
 	void __user *virtual;		/**< Mmap'd area in user-virtual */
 #endif
 	struct drm_buf_pub __user *list;	/**< Buffer information */
+#ifdef __sun
+       int fd;
+#endif
 };
 
 /**
